<%@ jet
imports="
        java.util.List
        java.util.ArrayList
        java.util.Stack
        org.talend.components.api.component.ComponentDefinition
        org.talend.components.api.component.InputComponentDefinition
        org.talend.components.api.component.OutputComponentDefinition
        org.talend.components.api.properties.ComponentProperties
        org.talend.components.api.container.RuntimeContainer
        org.talend.daikon.properties.Property
        org.talend.daikon.NamedThing
		org.talend.designer.core.generic.model.Component
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaType
        org.talend.core.model.metadata.types.JavaTypesManager
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.INode
        org.talend.core.model.utils.TalendTextUtils
        org.talend.designer.codegen.config.CodeGeneratorArgument
        "
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
Component component = (Component)node.getComponent();
ComponentProperties componentProps = node.getComponentProperties();
ComponentDefinition def = component.getComponentDefinition();

List<IMetadataTable> metadatas = node.getMetadataList();
IMetadataTable metadata = null;
List<IMetadataColumn> columnList = null;
boolean hasDynamic = false;
String dynamicColName = null;
int dynamicPos = -1;
if ((metadatas != null) && (metadatas.size() > 0)) { // metadata

	metadata = metadatas.get(0);
	if(metadata != null){
		columnList = metadata.getListColumns();
		int nbSchemaColumns = columnList.size();

		hasDynamic = false;
		
		int pos = 0;
		for (IMetadataColumn column : columnList) {
			if (column.getTalendType().equals("id_Dynamic")) {
				hasDynamic = true;
				dynamicPos = pos;
				dynamicColName = column.getLabel();
				break;
			}
			pos++;
		}
	}
}
%>

org.talend.components.api.component.ComponentDefinition def_<%=cid %> =
   new <%= def.getClass().getName()%>();
<%
List<Component.CodegenPropInfo> propsToProcess = component.getCodegenPropInfos(componentProps);
%>

<%= componentProps.getClass().getName()%> props_<%=cid %> = (<%= componentProps.getClass().getName()%>) def_<%=cid %>.createRuntimeProperties();
<%

for (Component.CodegenPropInfo propInfo : propsToProcess) { // propInfo
	List<NamedThing> properties = propInfo.props.getProperties();
	for (NamedThing prop : properties) { // property
        if (prop instanceof Property) { // if, only deal with valued Properties
            Property property = (Property)prop;
		    Object value = property.getValue();
		    if (value != null && (!(value instanceof String) || !((String)value).equals(""))) { // if
					%>
                    props_<%=cid %><%=propInfo.fieldName%>.setValue("<%=property.getName()%>",
                    <%=component.getCodegenValue(property, property.getStringValue())%>);
                    <%
    		} // if
        }//else may be a ComponentProperties so ignore
	} // property
} // propInfo
%>

org.talend.components.api.container.RuntimeContainer container_<%=cid%> = new org.talend.components.api.container.RuntimeContainer() { 
    // Nothing here for now
};

<%
if(metadata != null){
	if(def instanceof InputComponentDefinition){
		%>
		org.talend.components.api.component.runtime.Source source_<%=cid%> = ((org.talend.components.api.component.InputComponentDefinition)def_<%=cid%>).getRuntime();
		source_<%=cid%>.initialize(container_<%=cid%>, props_<%=cid%>);
		org.talend.components.api.component.runtime.Reader reader_<%=cid%> = source_<%=cid%>.createReader(container_<%=cid%>);

		org.apache.avro.Schema designSchema_<%=cid%> = source_<%=cid%>.getSchemaFromProperties(container_<%=cid%>);
		java.util.List<org.apache.avro.Schema.Field> designFields_<%=cid%> = designSchema_<%=cid%>.getFields();
		boolean hasDynamic_<%=cid%> = false;
		for(org.apache.avro.Schema.Field designField_<%=cid%> : designFields_<%=cid%>){
			hasDynamic_<%=cid%> = org.talend.daikon.avro.DynamicTypeFactory.isDynamic(designField_<%=cid%>.schema());
			if(hasDynamic_<%=cid%>){
				break;
			}
		}
		org.apache.avro.Schema runtimeSchema_<%=cid%> = org.talend.components.api.component.runtime.RuntimeHelper.resolveSchema(container_<%=cid%>, source_<%=cid%>, designSchema_<%=cid%>);
		<%if(hasDynamic){%>
			// init old dynamic holder
			routines.system.Dynamic dynamic_<%=cid%> = new routines.system.Dynamic();
			
			java.util.List<org.apache.avro.Schema.Field> dynamicFields_<%=cid%> = new java.util.ArrayList<org.apache.avro.Schema.Field>();

	        for (org.apache.avro.Schema.Field se_<%=cid%> : runtimeSchema_<%=cid%>.getFields()) {
	        	if(!designFields_<%=cid%>.contains(se_<%=cid%>)){
	            	dynamicFields_<%=cid%>.add(new org.apache.avro.Schema.Field(se_<%=cid%>.name(), se_<%=cid%>.schema(), se_<%=cid%>.doc(), se_<%=cid%>.defaultVal()));
	            }
	        }

			for(org.apache.avro.Schema.Field childDynamic_<%=cid%> : dynamicFields_<%=cid%>){
				routines.system.DynamicMetadata dynamicMetadata_<%=cid%> = new routines.system.DynamicMetadata();
		    	dynamicMetadata_<%=cid%>.setName(childDynamic_<%=cid%>.name());
		    	dynamicMetadata_<%=cid%>.setDbName(childDynamic_<%=cid%>.name());
		    	String talendType_<%=cid%> = null;
		    	if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.ARRAY){
		    		talendType_<%=cid%> = "List";
		    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.BOOLEAN){
		    		talendType_<%=cid%> = "Boolean";
		    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.BYTES){
		    		talendType_<%=cid%> = "byte[]";
		    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.FIXED){
		    		talendType_<%=cid%> = "byte[]";
		    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.DOUBLE){
		    		talendType_<%=cid%> = "Double";
		    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.FLOAT){
		    		talendType_<%=cid%> = "Float";
		    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.INT){
		    		talendType_<%=cid%> = "Integar";
		    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.LONG){
		    		talendType_<%=cid%> = "Long";
		    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.ENUM){
		    		talendType_<%=cid%> = "String";
		    	}else if(childDynamic_<%=cid%>.schema().getType() == org.apache.avro.Schema.Type.STRING){
		    		talendType_<%=cid%> = "String";
		    	}
		    	dynamicMetadata_<%=cid%>.setType("id_" + talendType_<%=cid%>);
		    	dynamic_<%=cid%>.metadatas.add(dynamicMetadata_<%=cid%>);
			} 
		<%
		}
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
		if(outgoingConns.size() > 0){ // outgoing size
			// FIXME - multiple outgoing connections?
			IConnection outgoingConn = outgoingConns.get(0);
            if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { // outgoingConn
                %>
                // Create a reusable factory that converts the output of the reader to an IndexedRecord.
                org.talend.daikon.avro.IndexedRecordAdapterFactory<Object, ? extends org.apache.avro.generic.IndexedRecord> factory_<%=cid%> = null;

                // This reusable object enforces that the output is directly usable by a Talend6 rowStruct following the component.
                // TODO how to indicate the Talend6SchemaOutputEnforcer by Index or Name? Salesforce should false, File should yes
                org.talend.daikon.talend6.Talend6OutgoingSchemaEnforcer current_<%=cid%> = new org.talend.daikon.talend6.Talend6OutgoingSchemaEnforcer(designSchema_<%=cid%>, false);

                // Iterate through the incoming data.
                for(boolean available = reader_<%=cid%>.start(); available; available = reader_<%=cid%>.advance()) {

                    // Construct the factory once when the first data arrives.
                    if (factory_<%=cid%> == null)
                        factory_<%=cid%> = (org.talend.daikon.avro.IndexedRecordAdapterFactory<Object, ? extends org.apache.avro.generic.IndexedRecord>) new org.talend.daikon.avro.AvroRegistry()
                                .createAdapterFactory(reader_<%=cid%>.getCurrent().getClass());

                    // Enforce the outgoing schema on the input.
                    org.apache.avro.generic.IndexedRecord unenforced_<%=cid%> = factory_<%=cid%>.convertToAvro(reader_<%=cid%>.getCurrent());
                    current_<%=cid%>.setWrapped(unenforced_<%=cid%>);
                    <%
					if(hasDynamic){
					%>
						dynamic_<%=cid%>.clearColumnValues();
                    <%
                    }
                    for (int i = 0; i < columnList.size(); i++) {
                        IMetadataColumn column = columnList.get(i);
                        String columnName = column.getLabel();
                        JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
                        String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
                        if(columnName.equals(dynamicColName)){
                        %>
                        	java.util.Map<String, Object> dynamicValue_<%=cid%> = (java.util.Map<String, Object>)current_<%=cid%>.get(<%=i%>);
                        	for(String dynamicValue_Key_<%=cid%> : dynamicValue_<%=cid%>.keySet()){
                        		dynamic_<%=cid%>.setColumnValue(dynamic_<%=cid%>.getIndex(dynamicValue_Key_<%=cid%>), dynamicValue_<%=cid%>.get(dynamicValue_Key_<%=cid%>));
                        	}
							<%=outgoingConn.getName()%>.<%=dynamicColName%> = dynamic_<%=cid%>;
                        <% 
                        }else{
                        %>
                        	if(current_<%=cid%>.get(<%=i%>) == null){
                        		<%=outgoingConn.getName()%>.<%=columnName%> = <%=JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate)%>;
                        	}else{
                        		<%if(javaType == JavaTypesManager.STRING){%>
                        			<%=outgoingConn.getName()%>.<%=columnName%> = String.valueOf(current_<%=cid%>.get(<%=i%>));
                        		<%}else{%>
	                        		<%=outgoingConn.getName()%>.<%=columnName%> = (<%=typeToGenerate%>)(current_<%=cid%>.get(<%=i%>));
	                        	<%}%>
                        	}
                    	<%
                    	}
                    }
			}
		}
	}else if(def instanceof OutputComponentDefinition){
	%>
		org.talend.components.api.component.runtime.Sink sink_<%=cid%> = ((org.talend.components.api.component.OutputComponentDefinition)def_<%=cid%>).getRuntime();
		sink_<%=cid%>.initialize(container_<%=cid%>, props_<%=cid%>);
		org.talend.components.api.component.runtime.WriteOperation writeOperation_<%=cid%> = sink_<%=cid%>.createWriteOperation();
		writeOperation_<%=cid%>.initialize(container_<%=cid%>);<%//create folder for file; create database/table for db%>
		org.talend.components.api.component.runtime.Writer writer_<%=cid%> = writeOperation_<%=cid%>.createWriter(container_<%=cid%>);
		writer_<%=cid%>.open("<%=cid%>");
		org.apache.avro.Schema designSchema_<%=cid%> = sink_<%=cid%>.getSchemaFromProperties(container_<%=cid%>);
	<%
	}
}
%>
