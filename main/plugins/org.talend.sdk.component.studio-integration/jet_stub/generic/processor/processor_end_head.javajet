<%/*
  Copyright (C) 2006-2018 Talend Inc. - www.talend.com
   Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/%>
<%@ jet
    imports="
        org.talend.core.model.components.IComponent
        org.talend.core.model.process.INode
        org.talend.core.runtime.IAdditionalInfo
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.designer.core.model.components.EParameterName
        org.talend.designer.core.model.components.ElementParameter
        org.talend.core.model.process.IElementParameter
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.EParameterFieldType
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.utils.NodeUtil
        java.util.List
        java.util.Locale
    "
%>
<%
    final CodeGeneratorArgument codeGenArgument = CodeGeneratorArgument.class.cast(argument);
    final INode node = INode.class.cast(codeGenArgument.getArgument());
    final String cid = node.getUniqueName();
    final IComponent component = node.getComponent();
    final boolean useLookup = component.useLookup();
%>

<%
    // refer to org.talend.designer.codegen/jet_stub/subprocess_header_java.skeleton
    java.util.Set<String> rowsInCurrentProcess = new java.util.HashSet<String>();
    for (IConnection conn : node.getIncomingConnections()) {
        if (conn.getLineStyle().equals(EConnectionType.FLOW_MAIN)) {
            INode startNode = conn.getSource();
            if ((startNode.isSubProcessStart() || !(NodeUtil.isDataAutoPropagated(startNode)))) {
                // new Instance
                if (!rowsInCurrentProcess.contains(conn.getName())) {
                  rowsInCurrentProcess.add(conn.getName());
                }
            } else {
                // copy
                if (!rowsInCurrentProcess.contains(conn.getName())) {
                  rowsInCurrentProcess.add(conn.getName());
                }
            }
        }
    }
%>

<%
    if (!useLookup) {
%>
        // single input can't run into this codes
        boolean canRunIntoMutileInputsCodes_<%=cid%> = false;
        if (canRunIntoMutileInputsCodes_<%=cid%>) {
<%
    } else {
%>
        boolean continueLoop = true;
        while(continueLoop) {
            continueLoop = false;
            for (Object value : inputIterMap_<%=cid%>.values()) {
                java.util.Iterator<Object> loopIter = (java.util.Iterator<Object>) value;
                if (loopIter.hasNext()) {
                    continueLoop = true;
                    break;
                }
            }
            if (!continueLoop) {
                break;
            }
<%
            for (String curRow : rowsInCurrentProcess) {
%>
                <%=curRow %> = null;
<%
            }
    }
%>