<%@ jet
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
	org.talend.core.model.utils.NodeUtil
"
%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();      
    String localdir = ElementParameterParser.getValue(node, "__LOCALDIR__");
    String replaceOption = ElementParameterParser.getValue(node,"__REPLACEOPTION__");
    List<Map<String, String>> filelist = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__FILELIST__");
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
    boolean enforceUnixPath = ("true").equals(ElementParameterParser.getValue(node,"__FORCE_UNIX_PATH__"));
		String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
		String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
		if(("true").equals(useExistingConn)){
		    String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
		    INode connectionNode = NodeUtil.getNodeByUniqueName(node.getProcess(), connection);
		    authMethod = ElementParameterParser.getValue(connectionNode,"__AUTH_METHOD__");
		}
%>
/* open a session */

                        <%if(isLog4jEnabled){%>
                            log.info("<%=cid%> - Open up a session.");
                        <%}%>

                        session_<%=cid%> = client_<%=cid%>.connect(username_<%=cid%>, hostname_<%=cid%>, port_<%=cid%>).verify().getClientSession();
                    try {
                        session_<%=cid%>.auth().verify();
                    }catch (org.apache.sshd.common.SshException se_<%=cid%>){
                        globalMap.put("<%=cid %>_EXIT_CODE",se_<%=cid%>.getDisconnectCode());
                    <%
                    if (("PUBLICKEY").equals(authMethod)) {
                    %>
                        java.nio.file.Files.write(privateKey_<%=cid%>,lines_<%=cid%>);
                    <%}%>
                        if(14 == se_<%=cid%>.getDisconnectCode()){
                            throw new IllegalArgumentException("Authentication failed.");
                        }else{
                            throw se_<%=cid%>;
                        }
                    }
                            org.apache.sshd.client.scp.ScpClientCreator instance_<%=cid%> = org.apache.sshd.client.scp.ScpClientCreator.instance();
                            org.apache.sshd.client.scp.DefaultScpClient scp_<%=cid%> = new org.apache.sshd.client.scp.DefaultScpClient(session_<%=cid%>, instance_<%=cid%>.getScpFileOpener(),
                                            instance_<%=cid%>.getScpTransferEventListener()) {

                                        @Override public void download(String remote, java.io.OutputStream local) throws IOException {
                                            String cmd = org.apache.sshd.client.scp.ScpClient.createReceiveCommand(remote, java.util.Collections.emptyList());
                                            org.apache.sshd.client.session.ClientSession session = getClientSession();
                                            org.apache.sshd.client.channel.ChannelExec channel = openCommandChannel(session, cmd);
                                            try (java.io.InputStream invOut = channel.getInvertedOut(); java.io.OutputStream invIn = channel.getInvertedIn()) {
                                                // NOTE: we use a mock file system since we expect no invocations for it
                                                org.apache.sshd.common.scp.ScpHelper helper =
                                                        new org.apache.sshd.common.scp.ScpHelper(session, invOut, invIn, new org.apache.sshd.common.file.util.MockFileSystem(remote), opener, listener) {

                                                            public int readAck(boolean canEof) throws IOException {
                                                                int c = in.read();
                                                                switch (c) {
                                                                case -1:
                                                                    if (log.isDebugEnabled()) {
                                                                        log.debug("readAck({})[EOF={}] received EOF", this, canEof);
                                                                    }
                                                                    if (!canEof) {
                                                                        throw new java.io.EOFException("readAck - EOF before ACK");
                                                                    }
                                                                    break;
                                                                case org.apache.sshd.common.scp.ScpHelper.OK:
                                                                    if (log.isDebugEnabled()) {
                                                                        log.debug("readAck({})[EOF={}] read OK", this, canEof);
                                                                    }
                                                                    break;
                                                                case org.apache.sshd.common.scp.ScpHelper.WARNING: {
                                                                    if (log.isDebugEnabled()) {
                                                                        log.debug("readAck({})[EOF={}] read warning message", this, canEof);
                                                                    }

                                                                    String line = readLine();
                                                                    log.warn("readAck({})[EOF={}] - Received warning: {}", this, canEof, line);
                                                                    throw new org.apache.sshd.common.scp.ScpException("received error: " + line, c);
                                                                }
                                                                case org.apache.sshd.common.scp.ScpHelper.ERROR: {
                                                                    if (log.isDebugEnabled()) {
                                                                        log.debug("readAck({})[EOF={}] read error message", this, canEof);
                                                                    }
                                                                    String line = readLine();
                                                                    if (log.isDebugEnabled()) {
                                                                        log.debug("readAck({})[EOF={}] received error: {}", this, canEof, line);
                                                                    }
                                                                    throw new org.apache.sshd.common.scp.ScpException("Received nack: " + line, c);
                                                                }
                                                                default:
                                                                    break;
                                                                }
                                                                return c;
                                                            }
                                                        };
                                                helper.receiveFileStream(local, org.apache.sshd.common.scp.ScpHelper.DEFAULT_RECEIVE_BUFFER_SIZE);
                                                handleCommandExitStatus(cmd, channel);
                                            } finally {
                                                channel.close(false);
                                            }
                                        }
                                    };


	String[] sourceFileNames_<%=cid%> = new String[]{
<%
		for (Map<String, String> file : filelist) {
%>
			<%=file.get("SOURCE")%>,
<%          
        }
%>
	};
	java.io.File dir_<%=cid %> = null;
	try{
<%
		if(("append").equals(replaceOption)){
%>
			for (String sourceFile_<%=cid %> : sourceFileNames_<%=cid %>) {
				if (sourceFile_<%=cid %> != null&& sourceFile_<%=cid %>.length() != 0) {
<%
					if (!enforceUnixPath) {
%>
						    sourceFile_<%=cid %> = sourceFile_<%=cid %>.replaceAll("\\\\","/");
<%
						}
%>


					int index_<%=cid %>=sourceFile_<%=cid %>.lastIndexOf("/");
					if(index_<%=cid %> >0){
						dir_<%=cid %> = new java.io.File(<%=localdir %>);
						String extension_<%=cid %>=	sourceFile_<%=cid %>.substring(index_<%=cid %>,sourceFile_<%=cid %>.length());
						java.io.File file_<%=cid %> = new java.io.File(dir_<%=cid %>, extension_<%=cid %>);
						if(!file_<%=cid %>.exists()){
						  file_<%=cid %>.getParentFile().mkdirs();
						}
						java.io.FileOutputStream out_<%=cid %> = null;
						
						//copy action
						int receive_<%=cid%> = -1;
						try {
							out_<%=cid %> = new java.io.FileOutputStream(file_<%=cid %>, true);
							scp_<%=cid%>.download(sourceFile_<%=cid %>.replaceAll("\\\\","\\\\\\\\").replaceAll(" ","\\\\ "),out_<%=cid %>);

						} catch(java.lang.Exception e_<%=cid%>) {
		                	if(out_<%=cid %> != null){
		                		out_<%=cid %>.close();
		                	}
							//only delete empty file when exception happen?this is old action,we keep it.
		            		if(file_<%=cid%>.length() == 0){
		            			file_<%=cid%>.delete();
		            		}
		            		throw e_<%=cid%>;
						} finally {
		                	if(out_<%=cid %> != null){
		                		out_<%=cid %>.close();
		                	}
		                	

						}
						nb_file_<%=cid%> ++ ;
						<%if(isLog4jEnabled){%>
							log.debug("<%=cid%> - Downloaded file " + nb_file_<%=cid%> +  ": " + sourceFile_<%=cid %> + " successfully.");
							log.info("<%= cid %> - Appended to "+sourceFile_<%=cid %>+" at local directory "+<%= localdir %>+" successfully.");
						<%}%>
					}
				}
			}
			if(nb_file_<%=cid%>>0){
				globalMap.put("<%=cid %>_STATUS", "File get OK.");
			}else{
				globalMap.put("<%=cid %>_STATUS", "No file transfered.");
			}
<%
		}else{
			boolean isDefaultAction = !("overwrite").equals(replaceOption);
			if(isDefaultAction) {
%>
		    	String parentPath_<%=cid%> = new java.io.File(<%=localdir %>).getPath();
				java.util.List<String> list_<%=cid%> = new java.util.ArrayList<String>();
				for (int i_<%=cid%> = 0; i_<%=cid%> < sourceFileNames_<%=cid%>.length; i_<%=cid%>++) {
		        	String fileName_<%=cid%> = sourceFileNames_<%=cid%>[i_<%=cid%>];
		            if (!new java.io.File((parentPath_<%=cid%>), (fileName_<%=cid%>)).exists()) {
		                list_<%=cid%>.add(fileName_<%=cid%>);
		            }
		        }
		        sourceFileNames_<%=cid%> = (String[]) list_<%=cid%>.toArray(new String[0]);
<%
			}
%>
			if(sourceFileNames_<%=cid%>!=null && sourceFileNames_<%=cid%>.length!=0){
				for (String sourceFile_<%=cid %> : sourceFileNames_<%=cid %>) {
					if (sourceFile_<%=cid %> != null&& sourceFile_<%=cid %>.length() != 0) {
<%
						if (!enforceUnixPath) {
%>
							sourceFile_<%=cid %> = sourceFile_<%=cid %>.replaceAll("\\\\","/");
<%
						}
%>
						int index_<%=cid %>=sourceFile_<%=cid %>.lastIndexOf("/");
						if(index_<%=cid %> >0){
							dir_<%=cid %> = new java.io.File(<%=localdir %>);
							String extension_<%=cid %>=	sourceFile_<%=cid %>.substring(index_<%=cid %>,sourceFile_<%=cid %>.length());
							java.io.File file_<%=cid %> = new java.io.File(dir_<%=cid %>, extension_<%=cid %>);
							if(!file_<%=cid %>.exists()){
								file_<%=cid %>.getParentFile().mkdirs();
							}
							java.io.FileOutputStream out_<%=cid %> = null;
		    				//copy action
		    				byte[] buffer_<%=cid%> = new byte[8192];
		    				int receive_<%=cid%> = -1;
		    				try {
		    					out_<%=cid %> = new java.io.FileOutputStream(file_<%=cid %>, false);
		    					scp_<%=cid%>.download(sourceFile_<%=cid %>.replaceAll("\\\\","\\\\\\\\").replaceAll(" ","\\\\ "),out_<%=cid %>);

		    				} catch(java.lang.Exception e_<%=cid%>) {
		                    	if(out_<%=cid %> != null){
		                    		out_<%=cid %>.close();
		                    	}
		    					//only delete empty file when exception happen?this is old action,we keep it.
		                		if(file_<%=cid%>.length() == 0){
		                		    nb_file_<%=cid%>--;
		                			file_<%=cid%>.delete();
		                		}
		                		throw e_<%=cid%>;
		    				} finally {
		                    	if(out_<%=cid %> != null){
		                    		out_<%=cid %>.close();
		                    	}
		    				}
							nb_file_<%=cid%> ++ ;
							<%if(isLog4jEnabled){%>
								log.debug("<%=cid%> - Downloaded file " + nb_file_<%=cid%> +  ": " + sourceFile_<%=cid %> + " successfully.");
								<% if(isDefaultAction){ %>
									 log.info("<%= cid %> - Overwrote or appended to "+sourceFile_<%=cid %>+" at local directory "+<%= localdir %>+" successfully.");
								<%
								}else{
								%>
									 log.info("<%= cid %> - Overwrote to "+sourceFile_<%=cid %>+" at local directory "+<%= localdir %>+" successfully.");
								<%
								}
							}%>
						}
					}
				}
				if(nb_file_<%=cid%>>0){
					globalMap.put("<%=cid %>_STATUS", "File get OK.");
				}else{
					globalMap.put("<%=cid %>_STATUS", "No file transfered.");
				}
			}
<%
		}
%>
	}catch(java.lang.Exception e_<%=cid%>){
		globalMap.put("<%=cid %>_STATUS", "File get fail.");
		globalMap.put("<%=cid %>_NB_FILE",nb_file_<%=cid%>);
		globalMap.put("<%=cid %>_ERROR_MESSAGE",e_<%=cid%>.getMessage());
		throw e_<%=cid%>;
	}
