<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser
    	org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
        java.util.List
        java.util.Map
		"
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
LogUtil logUtil = new LogUtil(node);
String cid = node.getUniqueName();
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
boolean dieOnError = ("true").equals(ElementParameterParser.getValue(node,"__DIE_ON_ERROR__"));
List<IMetadataTable> metadatas = node.getMetadataList();
if ((metadatas != null) && (metadatas.size() > 0)) {
	IMetadataTable metadata = metadatas.get(0);
	
	if (metadata != null) {
	
		List<IMetadataColumn> columnList = metadata.getListColumns();
		List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();

		// if output columns are defined
		if (outgoingConns != null && outgoingConns.size() > 0) {
		
			IConnection outgoingConn = outgoingConns.get(0);
			if(outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) { // start 1
	            boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
				String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
				String connConfig = "connConfig_" + connection;
				String mdmUrl = ElementParameterParser.getValue(node, "__MDMURL__");
				String username = ElementParameterParser.getValue(node, "__USERNAME__");
				String dataCluster = ElementParameterParser.getValue(node, "__DATACLUSTER__");
				String containerType = ElementParameterParser.getValue(node, "__CONTAINER_TYPE__");
				boolean retrieveRawData = ("true").equals(ElementParameterParser.getValue(node,"__RETRIEVE_RAW_DATA__"));
				String xmlField = ElementParameterParser.getValue(node, "__XMLFIELD__");
				String acceptType = retrieveRawData ? ElementParameterParser.getValue(node, "__ACCEPT_TYPE__") : "application/json";
				boolean returnXml = ("application/xml").equals(acceptType);
				String queryText = ElementParameterParser.getValue(node, "__QUERY_TEXT__").replaceAll(" ","").replaceAll("\n","").replaceAll("\r","").replaceAll("\"", "'");
				String fetchSize = ElementParameterParser.getValue(node, "__FETCHSIZE__");
				%>
				    class QueryDelegater_<%=cid%> {

                        private org.json.simple.parser.JSONParser parser = new org.json.simple.parser.JSONParser();

                        private org.json.simple.JSONObject queryObject;

                        private String dataCluster;

                        private String containerType;

                        private boolean retrieveRawData;

                        private String acceptType;

                        private Long orgStart;

                        private Long orgLimit;

                        private int fetchSize;

                        private org.apache.cxf.jaxrs.client.WebClient  webClient;

                        public QueryDelegater_<%=cid%>(java.util.Map<String, String> connConfig, String dataCluster, String containerType, String queryText,
                            boolean retrieveRawData, String acceptType, int fetchSize) {
                            this.initQueryObject(queryText);
                            this.dataCluster = dataCluster;
                            this.containerType = containerType;
                            this.retrieveRawData = retrieveRawData;
                            this.acceptType = acceptType;
                            this.fetchSize = fetchSize;
                            webClient = org.apache.cxf.jaxrs.client.WebClient.create(connConfig.get("url"),
                                java.util.Arrays.asList(new com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider()),
                                connConfig.get("username"), connConfig.get("password"), null);
                        }

                        private void initQueryObject(String queryText) {
                            try {
                                queryObject = (org.json.simple.JSONObject) parser.parse(queryText.replaceAll("'", "\""));
                                org.json.simple.JSONObject select = (org.json.simple.JSONObject) queryObject.get("select");
                                orgStart = (Long) select.get("start");
                                orgLimit = (Long) select.get("limit");
                            } catch (org.json.simple.parser.ParseException e) {
                            <%if(dieOnError){%>
                                throw new RuntimeException("Query text is not a valid JSON string.", e);
                            <%}else{%>
                                <% logUtil.error("\"Query text is not a valid JSON string.\"");%>
                                e.printStackTrace();
                            <%}%>
                            }
                        }

                        @SuppressWarnings("unchecked")
                        public org.json.simple.JSONObject getCountQuery() {
                            org.json.simple.JSONObject countQuery = null;
                            if (queryObject != null) {
                                org.json.simple.JSONObject orgSelect = (org.json.simple.JSONObject) queryObject.get("select");
                                org.json.simple.JSONArray orgFrom = (org.json.simple.JSONArray) orgSelect.get("from");
                                org.json.simple.JSONObject orgWhere = (org.json.simple.JSONObject) orgSelect.get("where");
                                org.json.simple.JSONObject select = new org.json.simple.JSONObject();
                                if (orgFrom != null)
                                    select.put("from", orgFrom);
                                if (orgWhere != null)
                                    select.put("where", orgSelect.get("where"));
                                try {
                                    select.put("fields", parser.parse("[{\"count\":{}}]"));
                                } catch (org.json.simple.parser.ParseException e) {
                                <%if(dieOnError){%>
                                    throw new RuntimeException("Failed to get count query JSON.", e);
                                <%}else{%>
                                    <% logUtil.error("\"Failed to get count query JSON.\"");%>
                                    e.printStackTrace();
                                <%}%>
                                }
                                countQuery = new org.json.simple.JSONObject();
                                countQuery.put("select", select);
                            }
                            return countQuery;
                        }

                        public String executeQuery(org.json.simple.JSONObject queryObj, boolean isCount) {
                            webClient.path("data/" + dataCluster + "/query").query("container", containerType).type("application/json");
                            if (isCount) {
                                webClient.accept("application/xml");
                            } else {
                                if (retrieveRawData) {
                                    webClient.accept(acceptType);
                                } else {
                                    webClient.accept("application/json");
                                }
                            }
                            <% logUtil.debug("\"Execute query:\" + queryObj.toJSONString()");%>
                            try {
                                javax.ws.rs.core.Response response = webClient.put(queryObj.toJSONString());
                                String queryResult = response.readEntity(String.class);
                                int statusCode = response.getStatus();
                                webClient.reset();
                                if (statusCode == 200) {
                                    return queryResult;
                                } else {
                                <%if(dieOnError){%>
                                    if (statusCode == 401) {
                                        throw new RuntimeException("Unauthorized! Invalid username and password.");
                                    } else if (statusCode == 404) {
                                        throw new RuntimeException("Not found! URL is not correct.");
                                    } else if (statusCode == 500 && org.apache.commons.lang.StringUtils.isBlank(dataCluster)) {
                                        throw new RuntimeException("Data container is empty or null.");
                                    } else {
                                        throw new RuntimeException(queryResult);
                                    }
                                <%}else{%>
                                    if (statusCode == 401) {
                                        <% logUtil.error("\"Unauthorized! Invalid username and password.\"");%>
                                    } else if (statusCode == 404) {
                                        <% logUtil.error("\"Not found! URL is not correct.\"");%>
                                    } else if (statusCode == 500 && org.apache.commons.lang.StringUtils.isBlank(dataCluster)) {
                                        <% logUtil.error("\"Data container is empty or null.\"");%>
                                    } else {
                                        <% logUtil.error("queryResult");%>
                                    }
                                    return null;
                                <%}%>
                                }
                            } catch(Exception e) {
                            <%if(dieOnError){%>
                                throw new RuntimeException("Unexpected exception.", e);
                            <%}else{%>
                                <% logUtil.error("\"Unexpected exception.\" + e.getMessage()");%>
                                e.printStackTrace();
                                return null;
                            <%}%>
                            }
                        }

                        public int getTotalCount() {
                            int totalCount = -1;
                            org.json.simple.JSONObject countQuery = getCountQuery();
                            if (countQuery != null) {
                                String dbCountResult = executeQuery(countQuery, true);
                                if (dbCountResult != null) {
                                    int dbTotalCount = Integer.parseInt(dbCountResult.replaceAll("<results><result><count>", "").replaceAll("</count></result></results>", ""));
                                    if (orgLimit == null || orgLimit > dbTotalCount) {
                                        totalCount = dbTotalCount;
                                    } else {
                                        totalCount = orgLimit.intValue();
                                    }
                                }
                            }
                            return totalCount;
                        }

                        @SuppressWarnings("unchecked")
                        public String getPagedResult(int totalCount, int loopInd) {
                            int start = fetchSize * loopInd + (orgStart == null ? 0 : orgStart.intValue());
                            int limit = totalCount > fetchSize * (loopInd + 1) ? fetchSize : totalCount - fetchSize * loopInd;
                            org.json.simple.JSONObject select = (org.json.simple.JSONObject)queryObject.get("select");
                            select.put("start", start);
                            select.put("limit", limit);
                            return executeQuery(queryObject, false);
                        }

                        public int getTotalLoop(int totalCount) {
                            return (int) Math.ceil((totalCount + fetchSize - 1) / fetchSize);
                        }
                    }

                    <%if(retrieveRawData && returnXml){%>
					class XMLStreamUnwrapper_<%=cid%> implements java.util.Enumeration<String> {

					    private static final int RECORD_LEVEL = 1;
					
					    private final javax.xml.stream.XMLEventReader reader;

					    private final ResettableStringWriter_<%=cid%> stringWriter = new ResettableStringWriter_<%=cid%>();
					
					    private final javax.xml.stream.XMLOutputFactory xmlOutputFactory;
					
					    private int level = 0;
					
					    public XMLStreamUnwrapper_<%=cid%>(java.io.InputStream stream) {
					        try {
					            reader = javax.xml.stream.XMLInputFactory.newFactory().createXMLEventReader(stream);
					            // Skip to first record
					            while (reader.hasNext() && level < RECORD_LEVEL) {
					                final javax.xml.stream.events.XMLEvent event = reader.nextEvent();
					                if (event.isStartElement()) {
					                    level++;
					                }
					            }
					            xmlOutputFactory = javax.xml.stream.XMLOutputFactory.newFactory();
					        } catch (javax.xml.stream.XMLStreamException e) {
					        <%if(dieOnError){%>
                                throw new RuntimeException("Unexpected parsing configuration error.", e);
                            <%}else{%>
                                <% logUtil.error("\"Unexpected parsing configuration error.\"+ e.getMessage()");%>
                                e.printStackTrace();
                            <%}%>
					        }
					    }
					
					    @Override
					    public boolean hasMoreElements() {
					        moveToNext();
					        return stringWriter.getBuffer().length() > 0;
					    }
					
					    @Override
					    public String nextElement() {
					        return stringWriter.reset();
					    }
					
					    /**
					     * Moves to next record in stream and stores it in {@link #stringWriter}.
					     */
					    private void moveToNext() {
					        try {
					            javax.xml.stream.XMLStreamWriter writer = xmlOutputFactory.createXMLStreamWriter(stringWriter);
					            boolean hasMadeChanges;
					            do {
					                if (!reader.hasNext()) {
					                    break;
					                }
					                hasMadeChanges = false; // Keep a state to skip line feeds
					                final javax.xml.stream.events.XMLEvent event = reader.nextEvent();
					                if (event.isEndElement()) {
					                    level--;
					                } else if (event.isStartElement()) {
					                    level++;
					                } else if (event.isEndDocument()) {
					                    level--;
					                }
					                if (level >= RECORD_LEVEL) {
					                    if (event.isEndElement()) {
					                        writer.writeEndElement();
					                        hasMadeChanges = true;
					                    } else if (event.isStartElement()) {
					                        final javax.xml.stream.events.StartElement startElement = event.asStartElement();
					                        final javax.xml.namespace.QName name = startElement.getName();
					                        writer.writeStartElement(name.getNamespaceURI(), name.getLocalPart());
					                        // Declare namespaces (if any)
					                        final java.util.Iterator namespaces = startElement.getNamespaces();
					                        while (namespaces.hasNext()) {
					                            javax.xml.stream.events.Namespace namespace = (javax.xml.stream.events.Namespace) namespaces.next();
					                            writer.writeNamespace(namespace.getPrefix(), namespace.getNamespaceURI());
					                        }
					                        // Write attributes
					                        final java.util.Iterator attributes = startElement.getAttributes();
					                        while (attributes.hasNext()) {
					                            javax.xml.stream.events.Attribute attribute = (javax.xml.stream.events.Attribute) attributes.next();
					                            javax.xml.namespace.QName attributeName = attribute.getName();
					                            String value = attribute.getValue();
					                            if (attributeName.getNamespaceURI() != null && attributeName.getNamespaceURI().length() > 0) {
					                                writer.writeAttribute(attributeName.getLocalPart(), value);
					                            } else {
					                                writer.writeAttribute(attributeName.getNamespaceURI(), attributeName.getLocalPart(), value);
					                            }
					                        }
					                        hasMadeChanges = true;
					                    } else if (event.isCharacters()) {
					                        final String text = event.asCharacters().getData().trim();
					                        if (!text.isEmpty()) {
					                            writer.writeCharacters(text);
					                            hasMadeChanges = true;
					                        }
					                    }
					                }
					            } while (level > RECORD_LEVEL || !hasMadeChanges);
					            writer.flush();
					        } catch (javax.xml.stream.XMLStreamException e) {
					        <%if(dieOnError){%>
                                throw new RuntimeException("Unexpected parsing exception.", e);
                            <%}else{%>
                                <% logUtil.error("\"Unexpected parsing exception.\" + e.getMessage()");%>
                                e.printStackTrace();
                            <%}%>
					        }
					    }
					    class ResettableStringWriter_<%=cid%> extends java.io.StringWriter {
				
						    private java.io.StringWriter delegate = new java.io.StringWriter();
						
						    private int currentLength = 0;
						
						    private int maxLength = -1;
						
						    public ResettableStringWriter_<%=cid%>() {
						    }
						
						    public String reset() {
						        if (currentLength > maxLength) {
						            maxLength = currentLength;
						        }
						        currentLength = 0;
						        String result = delegate.toString();
						        delegate = new java.io.StringWriter(maxLength);
						        return result;
						    }
						
						    @Override
						    public void write(int c) {
						        currentLength++;
						        delegate.write(c);
						    }
						
						    @Override
						    public void write(char[] cbuf, int off, int len) {
						        currentLength += len;
						        delegate.write(cbuf, off, len);
						    }
						
						    @Override
						    public void write(String str) {
						        currentLength += str.length();
						        delegate.write(str);
						    }
						
						    @Override
						    public void write(String str, int off, int len) {
						        currentLength += len;
						        delegate.write(str, off, len);
						    }
						
						    @Override
						    public void write(char[] cbuf) throws java.io.IOException {
						        currentLength += cbuf.length;
						        delegate.write(cbuf);
						    }
						
						    @Override
						    public java.io.StringWriter append(CharSequence csq) {
						        currentLength += csq.length();
						        return delegate.append(csq);
						    }
						
						    @Override
						    public java.io.StringWriter append(CharSequence csq, int start, int end) {
						        currentLength += csq.length();
						        return delegate.append(csq, start, end);
						    }
						
						    @Override
						    public java.io.StringWriter append(char c) {
						        currentLength++;
						        return delegate.append(c);
						    }
						
						    @Override
						    public String toString() {
						        return delegate.toString();
						    }
						
						    @Override
						    public StringBuffer getBuffer() {
						        return delegate.getBuffer();
						    }
						
						    @Override
						    public void flush() {
						        delegate.flush();
						    }
						
						    @Override
						    public void close() throws java.io.IOException {
						        delegate.close();
						    }
				    	}
					}
					<%}%>
                    int nb_line_<%=cid %> = 0;
                    <% logUtil.debug("\"Initializing data service base from URL: \"", mdmUrl,"\".\"");%>

                    <%if(useExistingConn){%>
                        java.util.Map<String, String> connConfig_<%=cid%> = (java.util.HashMap<String, String>)globalMap.get("<%=connConfig%>");
                    <%}else{%>
                        <% String passwordFieldName = "__PASSWORD__"; %>
                        <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
                        java.util.Map<String, String> connConfig_<%=cid%> = new java.util.HashMap<String, String>();
                        connConfig_<%=cid%>.put("url", <%=mdmUrl%>);
                        connConfig_<%=cid%>.put("username", <%=username %>);
                        connConfig_<%=cid%>.put("password", decryptedPassword_<%=cid%>);
                    <%}%>

                    String dataCluster_<%=cid%> = <%=dataCluster%>;
                    String containerType_<%=cid%> = "<%=containerType%>";
                    String queryText_<%=cid%> = "<%=queryText%>";
                    boolean retrieveRawData_<%=cid%> = <%=retrieveRawData%>;
                    String acceptType_<%=cid%> = "<%=acceptType%>";
                    int fetchSize_<%=cid%> = <%=fetchSize%>;

                    QueryDelegater_<%=cid%> queryDelegater_<%=cid%> = new QueryDelegater_<%=cid%>(connConfig_<%=cid%>, dataCluster_<%=cid%>, containerType_<%=cid%>, queryText_<%=cid%>, retrieveRawData_<%=cid%>, acceptType_<%=cid%>, fetchSize_<%=cid%>);
                    int totalCount_<%=cid%> = queryDelegater_<%=cid%>.getTotalCount();
                    int totalLoop_<%=cid%> = queryDelegater_<%=cid%>.getTotalLoop(totalCount_<%=cid%>);

                    <% logUtil.info("\"Get item count: \" + totalCount_" + cid);%>

                    for(int loopInd_<%=cid%> = 0; loopInd_<%=cid%> < totalLoop_<%=cid%>; loopInd_<%=cid%> ++) {
                        String pagedResult_<%=cid%> = queryDelegater_<%=cid%>.getPagedResult(totalCount_<%=cid%>, loopInd_<%=cid%>);
                        <% logUtil.debug("\"Query page\" + loopInd_" + cid + " + \" result from server:\" + pagedResult_" + cid);%>
                        if(pagedResult_<%=cid%> != null) {
                        <%if(retrieveRawData && returnXml){%>
                            java.util.List<String> items_<%=cid%> = new java.util.ArrayList<String>();
                            try {
                                java.io.InputStream content_<%=cid%> = new java.io.ByteArrayInputStream(pagedResult_<%=cid%>.getBytes());
                                XMLStreamUnwrapper_<%=cid%> tokenizer_<%=cid%> = new XMLStreamUnwrapper_<%=cid%>(content_<%=cid%>);
                                while (tokenizer_<%=cid%>.hasMoreElements()) {
                                    items_<%=cid%>.add(tokenizer_<%=cid%>.nextElement());
                                }
                            } catch (Exception e) {
                            <%if(dieOnError){%>
                                throw new RuntimeException("Parsing query XML result failed.", e);
                            <%}else{%>
                                <% logUtil.error("\"Parsing query XML result failed.\" + e.getMessage()");%>
                                e.printStackTrace();
                            <%}%>
                            }
						<%}else{%>
                            java.util.List<org.json.simple.JSONObject> items_<%=cid%> = new java.util.ArrayList<org.json.simple.JSONObject>();
                            org.json.simple.parser.JSONParser parser_<%=cid%> = new org.json.simple.parser.JSONParser();
                            try {
                                org.json.simple.JSONArray array_<%=cid%> = (org.json.simple.JSONArray) parser_<%=cid%>.parse(pagedResult_<%=cid%>);
                            <%if(!retrieveRawData){%>
                                for(Object obj_<%=cid%> : array_<%=cid%>) {
                                    org.json.simple.JSONObject jsonObj_<%=cid%> = (org.json.simple.JSONObject) obj_<%=cid%>;
                                    items_<%=cid%>.add((org.json.simple.JSONObject)jsonObj_<%=cid%>.get(jsonObj_<%=cid%>.keySet().iterator().next()));
                                }
                            <%}else{%>
                                items_<%=cid%> = array_<%=cid%>;
                            <%}%>
                            } catch (org.json.simple.parser.ParseException e) {
                            <%if(dieOnError){%>
                                throw new RuntimeException("Parsing query JSON result failed.", e);
                            <%}else{%>
                                <% logUtil.error("\"Parsing query JSON result failed.\" + e.getMessage()");%>
                                e.printStackTrace();
                            <%}%>
                            }
                        <%}%>
						for(int i_<%=cid %>=0; i_<%=cid %> < items_<%=cid %>.size(); i_<%=cid %>++) {
						    nb_line_<%=cid %> ++;
						<%if(retrieveRawData){%>
							<%=outgoingConn.getName() %>.<%=xmlField %> = items_<%=cid %>.get(i_<%=cid %>).toString();
						<%}else {
							for(IMetadataColumn column : columnList){
								String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
								JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
								String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
								String defaultValue = column.getDefault();
								String defaultValueToSet = (column.isNullable() || (defaultValue != null && defaultValue.length() > 0)) ? defaultValue : "\"" + JavaTypesManager.getDefaultValueFromJavaType(typeToGenerate) + "\"";
								String labelValue = column.getLabel();
								String key1 = labelValue.toLowerCase(); // id
								String key2 = "metadata:" + key1; // metadata:timestamp
								String key3 = key2.replaceAll("_", ""); // metadata:taskid
						%>
								String obj_<%=cid%>_<%=labelValue%> = null;
								if (items_<%=cid %>.get(i_<%=cid %>).containsKey("<%=key1%>")) {
									obj_<%=cid%>_<%=labelValue%> = (String)items_<%=cid %>.get(i_<%=cid %>).get("<%=key1%>");
								} else if(items_<%=cid %>.get(i_<%=cid %>).containsKey("<%=key2%>")) {
									obj_<%=cid%>_<%=labelValue%> = (String)items_<%=cid %>.get(i_<%=cid %>).get("<%=key2%>");
								} else {
									obj_<%=cid%>_<%=labelValue%> = (String)items_<%=cid %>.get(i_<%=cid %>).get("<%=key3%>");
								}
								if(org.apache.commons.lang.StringUtils.isEmpty(obj_<%=cid%>_<%=labelValue%>)) {
									obj_<%=cid%>_<%=labelValue%> = <%=defaultValueToSet%>;
								}
								<% if(javaType == JavaTypesManager.STRING || javaType == JavaTypesManager.OBJECT) {//_1 %>
									<%=outgoingConn.getName() %>.<%=labelValue%> = obj_<%=cid%>_<%=labelValue%>;
								<%} else {//_1
									if(javaType == JavaTypesManager.DATE) {//_2  %>
										<%=outgoingConn.getName() %>.<%=labelValue%> = org.apache.commons.lang.StringUtils.isEmpty(obj_<%=cid%>_<%=labelValue%>) ? null : ParserUtils.parseTo_Date(obj_<%=cid%>_<%=labelValue%>, <%=patternValue%>);
									<%} else {//_2  %>
										<%=outgoingConn.getName() %>.<%=labelValue%> = org.apache.commons.lang.StringUtils.isEmpty(obj_<%=cid%>_<%=labelValue%>) ? null : ParserUtils.parseTo_<%=typeToGenerate %>(obj_<%=cid%>_<%=labelValue%>);
									<%}//_2
								}//_1
							}
				}
			}
		}
	}
}
%>