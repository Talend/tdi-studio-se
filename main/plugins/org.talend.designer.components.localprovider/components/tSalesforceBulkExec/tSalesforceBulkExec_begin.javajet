<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType	
		org.talend.core.model.utils.TalendTextUtils	
		java.util.List
		org.talend.core.model.process.IProcess
		"
%>
	<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();    	
	
	log4jFileUtil.componentStartInfo(node);
	log4jFileUtil.logParameters(node);
	
	IProcess process = node.getProcess();
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(process, "__LOG4J_ACTIVATE__"));
	
	String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");
	String apiVersion = ElementParameterParser.getValue(node, "__API_VERSION__");
	String username = ElementParameterParser.getValue(node, "__USER__");

	
	String sObject = ElementParameterParser.getValue(node, "__MODULENAME__");
	String customModulename = ElementParameterParser.getValue(node, "__CUSTOM_MODULE_NAME__");
	if ("CustomModule".equals(sObject)) {
		//modulename = customModulename; 
		sObject = customModulename;
	}else{
		sObject = "\""+sObject+"\"";
	}
	
	String action = ElementParameterParser.getValue(node, "__ACTION__");
	String externalId = ElementParameterParser.getValue(node, "__UPSERT_KEY_COLUMN__");
	//String contentType = ElementParameterParser.getValue(node, "__CONTENTTYPE__");
	String contentType = "csv";
	String bulkFileName = ElementParameterParser.getValue(node, "__BULKFILENAME__").trim();
	
	String maxBytes = ElementParameterParser.getValue(node,"__COMMIT_LEVEL_BYTES__");
	String maxRows = ElementParameterParser.getValue(node,"__COMMIT_LEVEL_ROWS__");
	
	boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
   	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
   	String proxyUsername = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");
   	String proxyPassword = ElementParameterParser.getValue(node,"__PROXY_PASSWORD__");
	
	boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	
	String concurrencyMode = ElementParameterParser.getValue(node,"__CONCURRENCY_MODE__");
	String awaitTime = ElementParameterParser.getValue(node,"__AWAIT_TIME__");
	
	boolean bulkConnection = true; //for tSalesforceOAuth.javajet
	
	String passwordFieldName = "";
	
	String loginType = ElementParameterParser.getValue(node,"__LOGIN_TYPE__");
	boolean useOAuth = "OAUTH".equals(loginType);
	%>
	int nb_line_<%=cid %> = 0;
    int nb_success_<%=cid%> = 0;
    int nb_reject_<%=cid%> = 0;
	System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
	
	org.talend.salesforceBulk.SforceBulkConnection sforceConn_<%=cid%> = null;
	<%
	if(useExistingConn){
	%>
		if(globalMap.get("conn_<%=connection%>")==null){
			throw new RuntimeException("Get null connection from <%=connection %>");
		}
		sforceConn_<%=cid%> = (org.talend.salesforceBulk.SforceBulkConnection)globalMap.get("conn_<%=connection %>");
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - use exsit connection : <%=connection%>");
		<%}%>
	<%
	}else{
		if(useOAuth){
    		String oauthKey = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_ID__");
    		String oauthSecret = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_SECRET__");
        	passwordFieldName = "__OAUTH_CLIENT_SECRET__";
        	if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
        	%>
        		String decryptedQauthClientPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
        	<%
        	} else {
        	%>
        		String decryptedQauthClientPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
        	<%
        	}
        	String tokenFile = ElementParameterParser.getValue(node,"__OAUTH_TOKEN_FILE__");
    		String callbackHost = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_HOST__");
    		String callbackPort = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_PORT__");
    		%>
    		sforceConn_<%=cid%> 
        		= new org.talend.salesforceBulk.SforceOAuthBulkConnection.Builder(<%=endpoint%>, <%=oauthKey%>, decryptedQauthClientPwd_<%=cid%>, <%=apiVersion%>, <%=callbackHost%>, <%=callbackPort%>)
        			<%
        			if(!"".equals(tokenFile) && !"\"\"".equals(tokenFile)){
        			%>
        				.setTokenFilePath(<%=tokenFile%>)
        			<%
        			}
        			%>
        			.build();
		<%
		}else{
			passwordFieldName = "__PASS__";
			%>

			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
			<%
			if(useProxy){
    			passwordFieldName = "__PROXY_PASSWORD__";
    			
    			if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
        		%>
        			String decryptedPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
        		<%
        		} else {
        		%>
        			String decryptedPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
        		<%
        		}
    			%>
    		<%
    		}	
			%>
			sforceConn_<%=cid%> 
    			= new org.talend.salesforceBulk.SforceBasicBulkConnection.Builder(<%=endpoint%>,<%=username%>,decryptedPassword_<%=cid%>,<%=apiVersion%>)
    				<%
    				if(useProxy){
            		%>
            			.setProxy(true,<%=proxyHost%>,<%=TalendTextUtils.removeQuotes(proxyPort)%>,<%=proxyUsername%>,decryptedPwd_<%=cid%>)
            		<%
            		}	
    				%>
    				.build();
		<%
		}
		if(isLog4jEnabled){%>
			log.info("<%=cid%> - Login successful");
		<%}
	}
	%>
	org.talend.salesforceBulk.SalesforceBulkAPI	sforceBulk_<%=cid%> = new org.talend.salesforceBulk.SalesforceBulkAPI(sforceConn_<%=cid%>);
	sforceBulk_<%=cid%>.setConcurrencyMode("<%=concurrencyMode%>");
	sforceBulk_<%=cid%>.setAwaitTime(<%=awaitTime%>);
	
	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Start to <%=action%> records in bulk.");
	<%}%>
	sforceBulk_<%=cid%>.executeBulk(<%=sObject%>,"<%=action%>",<%=externalId%>,"<%=contentType%>",<%=bulkFileName%>,<%=maxBytes%>,<%=maxRows%>);

	<%
	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {//1
	    IMetadataTable metadata = metadatas.get(0);
	    if (metadata!=null) {//2
		%>
			int j_<%=cid%>=0;
			int batchCount_<%=cid%> = sforceBulk_<%=cid%>.getBatchCount();
			for(int i = 0; i < batchCount_<%=cid%>; i++){
				java.util.List<java.util.Map<String,String>> resultListMessage_<%=cid%> = sforceBulk_<%=cid%>.getBatchLog(i);
				for(java.util.Map<String,String> resultMessage_<%=cid%> : resultListMessage_<%=cid%>){
					j_<%=cid%>++;
				 	nb_line_<%=cid %>++;
					<% 
					List<? extends IConnection> outgoingConns = node.getOutgoingSortedConnections();
					if(outgoingConns!=null){
						for (int i=0;i<outgoingConns.size();i++) {
					   		IConnection outgoingConn = outgoingConns.get(i);
					    	if (outgoingConn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
							%>
								<%=outgoingConn.getName() %> = null;			
							<%
					    	}
					    }
					}
    	
					List<? extends IConnection> connsSuccess = node.getOutgoingConnections("MAIN");
					List<? extends IConnection> connsReject = node.getOutgoingConnections("REJECT");
					%>	
					if("true".equals(resultMessage_<%=cid%>.get("Success"))){
						nb_success_<%=cid %>++;
						<%if(isLog4jEnabled){%>
							log.debug("<%=cid%> - <%=action%> record " + nb_line_<%=cid%> + " successful");
						<%}%> 
						<%
						if (connsSuccess != null && connsSuccess.size() == 1) {
							IConnection connSuccess = connsSuccess.get(0);
							if (connSuccess.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
							%>
								<%=connSuccess.getName() %> = new <%=connSuccess.getName() %>Struct();
		
								<%=connSuccess.getName() %>.salesforce_created = resultMessage_<%=cid%>.get("Created");
								<%log4jFileUtil.collectRetriveData(connSuccess.getName() + ".salesforce_created");%>
								<%=connSuccess.getName() %>.salesforce_id = resultMessage_<%=cid%>.get("Id");
								<%log4jFileUtil.collectRetriveData(connSuccess.getName() + ".salesforce_id");%>
								<%
								for (IMetadataColumn column: metadata.getListColumns()) {
									String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
									JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
									String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
									%>			
									if("#N/A".equals(String.valueOf(resultMessage_<%=cid%>.get("<%=column.getLabel() %>")))){
						        		resultMessage_<%=cid%>.put("<%=column.getLabel() %>",null);
						        	}
								    <%		
							        if(javaType == JavaTypesManager.STRING ){
									%>
							            <%=connSuccess.getName() %>.<%=column.getLabel() %> = resultMessage_<%=cid%>.get("<%=column.getLabel() %>");
									<%
							        }else if(javaType == JavaTypesManager.DATE){
							        %>
							            <%=connSuccess.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(resultMessage_<%=cid%>.get("<%=column.getLabel() %>"), <%= pattern %>);
							        <%
							        }else if(JavaTypesManager.isNumberType(javaType)) {
							        %>
							            <%=connSuccess.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate%>(resultMessage_<%=cid%>.get("<%=column.getLabel() %>"));
							        <%
							        }else { 
									%>
										<%=connSuccess.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate%>(resultMessage_<%=cid%>.get("<%=column.getLabel() %>"));
									<%
									}
									log4jFileUtil.collectRetriveData(connSuccess.getName() + "." + column.getLabel());											
								}
								if(isLog4jEnabled){
								%>
									log.trace("<%=cid%> - Content of the record " + nb_line_<%=cid%> + ": " + log4jSb_<%=cid%>);
									log4jSb_<%=cid%>.delete(0,log4jSb_<%=cid%>.length());
								<%
								} 
							}
						}
						%>
					}else{
						nb_reject_<%=cid%>++;
						<%if(isLog4jEnabled){%>
							log.debug("<%=cid%> - <%=action%> record " + nb_line_<%=cid%> + " failed");
						<%}%> 
						<%
						if (connsReject != null && connsReject.size() == 1) {
							IConnection connReject = connsReject.get(0);
							if (connReject.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
							%>
								<%=connReject.getName() %> = new <%=connReject.getName() %>Struct();
								<%=connReject.getName() %>.error = resultMessage_<%=cid%>.get("Error");
								<%log4jFileUtil.collectRetriveData(connReject.getName() + ".error");%>
								<%
								for (IMetadataColumn column: metadata.getListColumns()) {
									String typeToGenerate = JavaTypesManager.getTypeToGenerate(column.getTalendType(), column.isNullable());
									JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
									String pattern = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
									%>			
									if("#N/A".equals(String.valueOf(resultMessage_<%=cid%>.get("<%=column.getLabel() %>")))){
							        	resultMessage_<%=cid%>.put("<%=column.getLabel() %>", null);
							        }
								    <%		
							        if(javaType == JavaTypesManager.STRING ){
									%>
							            <%=connReject.getName() %>.<%=column.getLabel() %> = resultMessage_<%=cid%>.get("<%=column.getLabel() %>");
									<%
							        }else if(javaType == JavaTypesManager.DATE && pattern != null){
							        %>
							            <%=connReject.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_Date(resultMessage_<%=cid%>.get("<%=column.getLabel() %>"), <%= pattern %>);
							        <%
							        }else if(JavaTypesManager.isNumberType(javaType)) {
							        %>
							            <%=connReject.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate%>(resultMessage_<%=cid%>.get("<%=column.getLabel() %>"));
							        <%
							        }else { 
									%>
										<%=connReject.getName() %>.<%=column.getLabel() %> = ParserUtils.parseTo_<%=typeToGenerate%>(resultMessage_<%=cid%>.get("<%=column.getLabel() %>"));
									<%
									}
									log4jFileUtil.collectRetriveData(connReject.getName() + "." + column.getLabel());
								}
								if(isLog4jEnabled){
								%>
									log.trace("<%=cid%> - Content of the record " + nb_line_<%=cid%> + ": " + log4jSb_<%=cid%>);
									log4jSb_<%=cid%>.delete(0,log4jSb_<%=cid%>.length());
								<%
								} 
							}
						}else{
						%>
							System.err.print("Row "+j_<%=cid%>+":"+resultMessage_<%=cid%>.get("Error"));
							<%if(isLog4jEnabled){%>
								log.error("Row "+j_<%=cid%>+":"+resultMessage_<%=cid%>.get("Error"));
							<%}%> 
						<%
						}
						%>
		<%
		}//2
	}//1
	%>
					}
				
