<%@ jet
imports="
    org.talend.core.model.process.INode
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    org.talend.core.model.utils.NodeUtil
"
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
    List<Map<String, String>> filelist =(List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__FILELIST__");
    String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
    String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
    if(("true").equals(useExistingConn)){
        String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
        INode connectionNode = NodeUtil.getNodeByUniqueName(node.getProcess(), connection);
        authMethod = ElementParameterParser.getValue(connectionNode,"__AUTH_METHOD__");
    }
%>

        /* open a session */

        <%if(isLog4jEnabled){%>
            log.info("<%=cid%> - Open up a session.");
        <%}%>

        session_<%=cid%> = client_<%=cid%>.connect(username_<%=cid%>, hostname_<%=cid%>, port_<%=cid%>).verify().getClientSession();
    try {
        session_<%=cid%>.auth().verify();
    }catch (org.apache.sshd.common.SshException se_<%=cid%>){
        globalMap.put("<%=cid %>_EXIT_CODE",se_<%=cid%>.getDisconnectCode());
    <%
    if (("PUBLICKEY").equals(authMethod)) {
    %>
        java.nio.file.Files.write(privateKey_<%=cid%>,lines_<%=cid%>);
    <%}%>
        if(14 == se_<%=cid%>.getDisconnectCode()){
            throw new IllegalArgumentException("Authentication failed.");
        }else{
            throw se_<%=cid%>;
        }
    }
            org.apache.sshd.client.scp.ScpClientCreator instance_<%=cid%> = org.apache.sshd.client.scp.ScpClientCreator.instance();
            org.apache.sshd.client.scp.ScpClient scp_<%=cid%> = instance_<%=cid%>.createScpClient(session_<%=cid%>);

    String[] destFileNames_<%=cid%> = new String[]{
     <%
        for (Map<String, String> file : filelist) {
     %>
            <%=file.get("DESTINATION")%>,
     <%
        }
     %>
   };
    <%if(isLog4jEnabled){%>
        log.info("<%=cid%> - Truncating file from the server.");
    <%}%>
   for(String destFile_<%=cid %> : destFileNames_<%=cid%>){
    try{
           if(destFile_<%=cid %>!=null && destFile_<%=cid %>.length()!=0){
               java.util.List<java.nio.file.attribute.PosixFilePermission> posixFilePermissions = java.util.Arrays.asList(java.nio.file.attribute.PosixFilePermission.OWNER_READ,
               java.nio.file.attribute.PosixFilePermission.OWNER_WRITE,
               java.nio.file.attribute.PosixFilePermission.GROUP_READ,
               java.nio.file.attribute.PosixFilePermission.OTHERS_READ);
               scp_<%=cid%>.upload(new byte[0],destFile_<%=cid %>,posixFilePermissions,new org.apache.sshd.common.scp.ScpTimestamp(System.nanoTime(),System.nanoTime()));
               nb_file_<%=cid%> ++;
               globalMap.put("<%=cid %>_STATUS", "File truncate OK.");
           }
       }catch(java.lang.Exception e){
            globalMap.put("<%=cid %>_STATUS", "File truncate fail.");
       }
   }
   session_<%=cid%>.close();