<%@ jet 
  imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    org.talend.core.model.process.IElementParameter
    org.talend.core.model.utils.NodeUtil 
  "
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();  
String cid = node.getUniqueName();
String host = ElementParameterParser.getValue(node, "__HOST__");
String port = ElementParameterParser.getValue(node, "__PORT__");
String ftpsPort = ElementParameterParser.getValue(node, "__FTPS_PORT__");
String user = ElementParameterParser.getValue(node, "__USERNAME__");

boolean use_encoding = "true".equals(ElementParameterParser.getValue(node, "__USE_ENCODING__"));

String remotedir = ElementParameterParser.getValue(node, "__REMOTEDIR__");
String encoding = ElementParameterParser.getValue(node, "__ENCODING__");
String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
String privateKey = ElementParameterParser.getValue(node,"__PRIVATEKEY__");

List<Map<String, String>> files = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILES__");  
boolean useProxy = ("true").equals(ElementParameterParser.getValue(node,"__USE_PROXY__"));
String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
String proxyUser = ElementParameterParser.getValue(node,"__PROXY_USERNAME__");

String connectMode = ElementParameterParser.getValue(node,"__CONNECT_MODE__");
String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
String conn= "conn_" + connection;
String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
boolean moveToCurrentDir = ("true").equals(ElementParameterParser.getValue(node, "__MOVE_TO_THE_CURRENT_DIRECTORY__"));
boolean sftp = false;
boolean ftps = false;
String protectionLevel = ElementParameterParser.getValue(node, "__FTPS_PROT__");
String protectionBufferSize = ElementParameterParser.getValue(node, "__FTPS_PROTECTION_BUFF_SIZE__");
boolean useRemoteVerification = ("true").equals(ElementParameterParser.getValue(node, "__REMOTE_VERIFICATION__"));

if (("true").equals(useExistingConn)) {
  List<? extends INode> nodeList = node.getProcess().getGeneratingNodes();

  for (INode n : nodeList) {
    if (n.getUniqueName().equals(connection)) {
      sftp = ("true").equals(ElementParameterParser.getValue(n, "__SFTP__"));
      ftps = ("true").equals(ElementParameterParser.getValue(n, "__FTPS__"));
      break;
    }
  }
} else {
  sftp = ("true").equals(ElementParameterParser.getValue(node, "__SFTP__"));
  ftps = ("true").equals(ElementParameterParser.getValue(node, "__FTPS__"));
}

boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
String passwordFieldName = "";

//The following part support the socks proxy for FTP and SFTP (Socks V4 or V5, they are all OK). 
//And it can not work with the FTP proxy directly, only support the socks proxy.
if (useProxy && !("true").equals(useExistingConn)) {
%>
	java.util.Properties props_<%=cid%> = System.getProperties();
	props_<%=cid%>.put("socksProxyPort", <%=proxyPort %>);
	props_<%=cid%>.put("socksProxyHost", <%=proxyHost %>);
	props_<%=cid%>.put("java.net.socks.username", <%=proxyUser %>);
	
<%
passwordFieldName = "__PROXY_PASSWORD__";
if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
%> 
  String decryptedProxyPassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
<%} else {%>
  String decryptedProxyPassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
<%}%>
	
	props_<%=cid%>.put("java.net.socks.password", decryptedProxyPassword_<%=cid%>);
	java.net.Authenticator.setDefault(new java.net.Authenticator() {
		public java.net.PasswordAuthentication getPasswordAuthentication() {
			return new java.net.PasswordAuthentication(<%=proxyUser %>, decryptedProxyPassword_<%=cid%>.toCharArray());
		}
	});
<%}%>
	int nb_file_<%=cid%> = 0;

<%  
if (sftp) {// *** sftp *** //

	if (("false").equals(useExistingConn)) {
	%>
		class MyUserInfo_<%=cid%> implements com.jcraft.jsch.UserInfo, com.jcraft.jsch.UIKeyboardInteractive {
		
			<%
            passwordFieldName = "__PASSPHRASE__";
            if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
            %> 
          		String decryptedPassphrase_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
            <%} else {%>
          		String decryptedPassphrase_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
            <%}%>
		
			String passphrase_<%=cid %> = decryptedPassphrase_<%=cid%>;
			public String getPassphrase() { return passphrase_<%=cid %>; }

			public String getPassword() { return null; } 
			public boolean promptPassword(String arg0) { return true; } 
			public boolean promptPassphrase(String arg0) { return true; } 
			public boolean promptYesNo(String arg0) { return true; } 
			public void showMessage(String arg0) { } 

			public String[] promptKeyboardInteractive(String destination, String name, String instruction, String[] prompt,
				boolean[] echo) {
			
			<%
			passwordFieldName = "__PASSWORD__";
			%> 
    	
			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
			
				String[] password_<%=cid%> = {decryptedPassword_<%=cid%>};
				return password_<%=cid%>;
			}
		}; 
		final com.jcraft.jsch.UserInfo defaultUserInfo_<%=cid%> = new MyUserInfo_<%=cid%>();
		com.jcraft.jsch.JSch jsch_<%=cid%>=new com.jcraft.jsch.JSch(); 

		<%if (("PUBLICKEY").equals(authMethod)) {%>
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - SFTP authentication using a public key.");
				log.debug("<%=cid%> - Private key: '" + <%=privateKey%> + "'.");
			<%}%>
			jsch_<%=cid%>.addIdentity(<%=privateKey %>, defaultUserInfo_<%=cid%>.getPassphrase());
    	<%}%>
    	
		com.jcraft.jsch.Session session_<%=cid%>=jsch_<%=cid%>.getSession(<%=user%>, <%=host%>, <%=port%>);
		session_<%=cid%>.setConfig("PreferredAuthentications", "publickey,password,keyboard-interactive,gssapi-with-mic");

		<%if (("PASSWORD").equals(authMethod)) {%> 
			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> - SFTP authentication using a password.");
			<%}%>
			
			<%
			passwordFieldName = "__PASSWORD__";
			%> 
    	
			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
			
      		session_<%=cid%>.setPassword(decryptedPassword_<%=cid%>); 
    	<%}%>
		session_<%=cid%>.setUserInfo(defaultUserInfo_<%=cid%>); 
		<%if (!useProxy) {%>
			if(("true").equals(System.getProperty("http.proxySet")) ){
				com.jcraft.jsch.ProxyHTTP proxy_<%=cid%> = new com.jcraft.jsch.ProxyHTTP(System.getProperty("http.proxyHost"),Integer.parseInt(System.getProperty("http.proxyPort")));
				if(!"".equals(System.getProperty("http.proxyUser"))){
					proxy_<%=cid%>.setUserPasswd(System.getProperty("http.proxyUser"),System.getProperty("http.proxyPassword"));
				}
				session_<%=cid%>.setProxy(proxy_<%=cid%>);
			}
		<%}%>
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" + <%=user%> + "'.");
		<%}%>
	    session_<%=cid%>.connect();
	    com.jcraft.jsch. Channel channel_<%=cid%>=session_<%=cid%>.openChannel("sftp");
	    channel_<%=cid%>.connect();
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
		<%}%>
	    com.jcraft.jsch.ChannelSftp c_<%=cid%>=(com.jcraft.jsch.ChannelSftp)channel_<%=cid%>;
	    
	    <%if(use_encoding) {%>
	    	c_<%=cid%>.setFilenameEncoding(<%=encoding%>);
	    <%}%>
	<%
	} else {
	%>    
	    com.jcraft.jsch.ChannelSftp c_<%=cid%> = (com.jcraft.jsch.ChannelSftp)globalMap.get("<%=conn %>");
		<%if(isLog4jEnabled){%>
			if(c_<%=cid%>!=null && c_<%=cid%>.getSession()!=null) {
				log.info("<%=cid%> - Use an existing connection.Connection username: " + c_<%=cid%>.getSession().getUserName() + ", Connection hostname: " + c_<%=cid%>.getSession().getHost() + ", Connection port: " + c_<%=cid%>.getSession().getPort() + "."); 
			}
		<%}
        if (!moveToCurrentDir) {
%>
            String rootDir_<%=cid %> = c_<%=cid %>.pwd();
<%
        }
	}
	%> 
	java.util.List<java.util.Map<String,String>> list<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();

	<%for (int i = 0; i < files.size(); i++) {
    	Map<String, String> line = files.get(i);
    %>    
	    java.util.Map<String,String> map<%=cid %><%=i %> = new java.util.HashMap<String,String>();
	    map<%=cid %><%=i %>.put(<%= line.get("FILEMASK") %>,"");
	    list<%=cid %>.add(map<%=cid %><%=i %>);
	<%}%>

    c_<%=cid %>.cd(<%=remotedir%>);

    <%if(isLog4jEnabled){%>
    	log.info("<%=cid%> - Truncating file from the server.");
    <%}%>
	for (java.util.Map<String, String> map<%=cid %> : list<%=cid %>) {

<%
} else if (ftps) { // *** ftps *** //
	 /* creating connection */ 
	if (("false").equals(useExistingConn)) {
		String keystoreFile = ElementParameterParser.getValue(node, "__KEYSTORE_FILE__");
		String securityMode = ElementParameterParser.getValue(node, "__SECURITY_MODE__");
%>
		<%@ include file="../templates/FTP/ftpstlsResumption.javajet"%>
		javax.net.ssl.SSLContext sslContext_<%=cid %> = null;
		javax.net.ssl.TrustManager[] trustManager_<%=cid %> = null;
		javax.net.ssl.SSLSocketFactory sslSocketFactory_<%=cid %> = null;
		org.apache.commons.net.ftp.FTPSClient ftp_<%=cid %> =null;
		MyTrust_<%=cid %> myTrust_<%=cid%> = null;

		try {
			sslContext_<%=cid %> = javax.net.ssl.SSLContext.getInstance("SSL");
			myTrust_<%=cid%> = new MyTrust_<%=cid%>();
			trustManager_<%=cid %> = myTrust_<%=cid%>.getTrustManagers();
			sslContext_<%=cid %>.init(null, trustManager_<%=cid %>, new java.security.SecureRandom());
			sslSocketFactory_<%=cid %> = sslContext_<%=cid %>.getSocketFactory();
			ftp_<%=cid %> = new SSLSessionReuseFTPSClient_<%=cid %>(<%="IMPLICIT".equals(securityMode)%>, sslContext_<%=cid %>);
			ftp_<%=cid %>.setControlEncoding(<%=encoding%>);

			<%if(isLog4jEnabled){%>
				log.info("<%=cid%> -FTPS security Mode is <%=securityMode%>.");
				log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" + <%=user %>+ "'.");
			<%}%>
			ftp_<%=cid %>.connect(<%=host %>,<%=ftpsPort %>);
<%
			if(isLog4jEnabled){
%>
				log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
<%
			}

			passwordFieldName = "__PASSWORD__";
%>
			ftp_<%=cid %>.setRemoteVerificationEnabled(<%=useRemoteVerification %>);
			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

			boolean isLoginSuccessful_<%=cid %> = ftp_<%=cid %>.login(<%=user %>, decryptedPassword_<%=cid%>);

			if (!isLoginSuccessful_<%=cid %>) {
				throw new RuntimeException("Login failed");
			}

			ftp_<%=cid %>.execPROT(<%=protectionLevel %>);
			ftp_<%=cid %>.execPBSZ(<%=protectionBufferSize %>);
		} catch (Exception e) {
			<%if(isLog4jEnabled){%>
				log.error("<%=cid%> - Can't create connection: " + e.getMessage());
			<%}%>
			throw e;
		}
<%
		if ("PASSIVE".equals(connectMode)) {
%>
			ftp_<%=cid %>.enterLocalPassiveMode();
<%
			if (isLog4jEnabled) {
%>
				log.debug("<%=cid%> - Using the passive mode.");
<%
			}
		}
	} else {
%>
		org.apache.commons.net.ftp.FTPSClient ftp_<%=cid %> = (org.apache.commons.net.ftp.FTPSClient) globalMap.get("<%=conn %>");
<%
		if (moveToCurrentDir) {
%>
			boolean cwdSuccess_<%=cid %> = ftp_<%=cid %>.changeWorkingDirectory(<%=remotedir %>);

			if (!cwdSuccess_<%=cid %>) {
				throw new RuntimeException("Failed to change remote directory. " + ftp_<%=cid %>.getReplyString());
			}
<%
		}
	}
%>
	<% /*store real pwd*/ %>
	String rootWorkDir_<%=cid %> = ftp_<%=cid %>.printWorkingDirectory();	
	java.util.List<java.util.Map<String,String>> list<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();
<%
			for (int i = 0; i < files.size(); i++) {
				Map<String, String> line = files.get(i);
%>
				java.util.Map<String,String> map<%=cid %><%=i %> = new java.util.HashMap<String,String>();
				map<%=cid %><%=i %>.put(<%= line.get("FILEMASK") %>,"");
				list<%=cid %>.add(map<%=cid %><%=i %>);
<%
			}
%>  
	for (java.util.Map<String, String> map<%=cid %> : list<%=cid %>) { <% /* start main loop */ %>
<%
} else {// *** ftp *** //
%>
	com.enterprisedt.net.ftp.FTPClient ftp_<%=cid %> = null;

	<%if (("true").equals(useExistingConn)) {%>
		ftp_<%=cid %> = (com.enterprisedt.net.ftp.FTPClient)globalMap.get("<%=conn %>");
		<%if(isLog4jEnabled){%>
			if(ftp_<%=cid %>!=null) {
				log.info("<%=cid%> - Use an existing connection. Connection hostname: " + ftp_<%=cid %>.getRemoteHost() + ", Connection port: " + ftp_<%=cid %>.getRemotePort() + "."); 
			}
		<%}%>
		<%if(!moveToCurrentDir){%>
		  String rootDir_<%=cid %> = ftp_<%=cid %>.pwd();
		<%}%>
	<%} else {%>    
	    ftp_<%=cid %> = new com.enterprisedt.net.ftp.FTPClient();
	    ftp_<%=cid %>.setRemoteHost(<%=host %>);
	    ftp_<%=cid %>.setRemotePort(<%=port %>);

	    <%if(isLog4jEnabled){%>
			log.debug("<%=cid%> - " + <%=(("ACTIVE").equals(connectMode))?"\"Using the active mode.\"":"\"Using the passive mode.\""%>);
		<%}%>
	    <% if (("ACTIVE").equals(connectMode)) {%>
	      ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.ACTIVE);
	    <%} else {%>
	      ftp_<%=cid %>.setConnectMode(com.enterprisedt.net.ftp.FTPConnectMode.PASV);
	    <%}%>
    	ftp_<%=cid %>.setControlEncoding(<%=encoding%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Attempt to connect to '" + <%=host %> + "' with username '" +<%=user %>+ "'.");
		<%}%>
	    ftp_<%=cid %>.connect();
	    
	    <%
		passwordFieldName = "__PASSWORD__";
		%> 
	
		<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
			
	    ftp_<%=cid %>.login(<%=user %>, decryptedPassword_<%=cid%>);
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Connect to '" + <%=host %> + "' has succeeded.");
		<%}%>   
  	<%}%> 
	java.util.List<java.util.Map<String,String>> list<%=cid %> = new java.util.ArrayList<java.util.Map<String,String>>();

	<%for (int i = 0; i < files.size(); i++) {
    	Map<String, String> line = files.get(i);
    %>    
		java.util.Map<String,String> map<%=cid %><%=i %> = new java.util.HashMap<String,String>();
		map<%=cid %><%=i %>.put(<%= line.get("FILEMASK") %>,"");
		list<%=cid %>.add(map<%=cid %><%=i %>);       
	<%}%>
	String remotedir<%=cid %> = <%=remotedir%>;
	ftp_<%=cid %>.chdir(remotedir<%=cid %>);
	String root<%=cid %> = ftp_<%=cid %>.pwd();

	<%if(isLog4jEnabled){%>
		log.info("<%=cid%> - Truncating file from the server.");
	<%}%>
	for (java.util.Map<String, String> map<%=cid %> : list<%=cid %>) {
<%}%>
