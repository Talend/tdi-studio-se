<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
	java.util.List
	java.util.Map
" 
%>
	<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
	
    String cid = node.getUniqueName();
    String bucket = ElementParameterParser.getValue(node,"__BUCKET__");
    String key = ElementParameterParser.getValue(node,"__KEY__");
    String file = ElementParameterParser.getValue(node,"__FILE__");
	String dieOnError = ElementParameterParser.getValue(node, "__DIE_ON_ERROR__");
	String partSizeMb = ElementParameterParser.getValue(node, "__PART_SIZE__");
	
	if(partSizeMb == null) {
		partSizeMb = "5";
	}
	
	boolean enableServerSideEncryption = "true".equals(ElementParameterParser.getValue(node, "__ENABLE-SERVER-SIDE-ENCRYPTION__"));
	
	%>
	<%@ include file="../tS3Connection/S3Client.javajet" %>
	boolean multiUpload_<%=cid%> = false;
	boolean useStream_<%=cid%> = false;
	int partSizeInBytes_<%=cid%> = <%=partSizeMb%> * 1024 * 1024;
	class S3StreamUtil {
    
	    public int getLength(byte[] output) {
		    for (int i = output.length - 1; i > 0; i--) {
			    if (output[i] != 0) {
				    return i + 1;
			    }
		    }
		    return 0;
	    }
	}
	
	    S3StreamUtil streamUtil_<%=cid%> = new S3StreamUtil();
		java.io.File inputFile_<%=cid%> = null;
		java.io.InputStream uploadStream_<%=cid%> = null;
		java.io.InputStream sourceStream_<%=cid%> = null;
		byte[] buffer_<%=cid%> = null;
		long curPartSize_<%=cid%> = 0;
		Object fileOrStream_<%=cid%> = <%=file%>;
	
	try{
		<%
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Uploading an object with key:" + <%=key%>);
		<%
		}
		%>

		
		if(fileOrStream_<%=cid%> instanceof String){
		    inputFile_<%=cid%> = new java.io.File((String)fileOrStream_<%=cid%>);
		    multiUpload_<%=cid%> = (inputFile_<%=cid%>.length() > partSizeInBytes_<%=cid%>) && (inputFile_<%=cid%>.length() >= 5 * 1024 * 1024);
		    useStream_<%=cid%> = false;
		}else if(fileOrStream_<%=cid%> instanceof java.io.InputStream ){
		    buffer_<%=cid%> = new byte[partSizeInBytes_<%=cid%>];
		    sourceStream_<%=cid%> = ((java.io.InputStream)fileOrStream_<%=cid%>);
		    sourceStream_<%=cid%>.read(buffer_<%=cid%>);
		    curPartSize_<%=cid%> = streamUtil_<%=cid%>.getLength(buffer_<%=cid%>);
		    multiUpload_<%=cid%> = curPartSize_<%=cid%> == partSizeInBytes_<%=cid%>;
		    uploadStream_<%=cid%> = new java.io.ByteArrayInputStream(buffer_<%=cid%>);
		    useStream_<%=cid%> = true;
		}
        com.amazonaws.services.s3.model.ObjectMetadata objectMetadata_<%=cid%> = new com.amazonaws.services.s3.model.ObjectMetadata();
		
		if(!multiUpload_<%=cid%>) {
		    
		<%
		if(enableServerSideEncryption){
		%>
			
			objectMetadata_<%=cid%>.setSSEAlgorithm(com.amazonaws.services.s3.model.ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION);
		<%
		}
		%>
		
		com.amazonaws.services.s3.model.PutObjectRequest putRequest_<%=cid%> = null;
		  if(useStream_<%=cid%>){
		      objectMetadata_<%=cid%>.setContentLength(curPartSize_<%=cid%>);
		      uploadStream_<%=cid%> = new java.io.ByteArrayInputStream(buffer_<%=cid%>,0,Long.valueOf(curPartSize_<%=cid%>).intValue());
		      putRequest_<%=cid%> = new com.amazonaws.services.s3.model.PutObjectRequest(<%=bucket%>, <%=key%>, uploadStream_<%=cid%>, objectMetadata_<%=cid%>);
		  }else{
		      putRequest_<%=cid%> = new com.amazonaws.services.s3.model.PutObjectRequest(<%=bucket%>, <%=key%>, inputFile_<%=cid%>).withMetadata(objectMetadata_<%=cid%>);
		  }
		

		
		conn_<%=cid%>.putObject(putRequest_<%=cid%>);
		} else {
			<%
			if(enableServerSideEncryption){
			%>
				objectMetadata_<%=cid%>.setSSEAlgorithm(com.amazonaws.services.s3.model.ObjectMetadata.AES_256_SERVER_SIDE_ENCRYPTION);
			<%
			}
			%>
			
			
			long filePosition_<%=cid%> = 0;
			java.util.List<com.amazonaws.services.s3.model.PartETag> partTags_<%=cid%> = new java.util.ArrayList<com.amazonaws.services.s3.model.PartETag>();
			com.amazonaws.services.s3.model.InitiateMultipartUploadRequest initRequest_<%=cid%> = new com.amazonaws.services.s3.model.InitiateMultipartUploadRequest(<%=bucket%>, <%=key%>,objectMetadata_<%=cid%>);

			com.amazonaws.services.s3.model.InitiateMultipartUploadResult initResponse_<%=cid%> = conn_<%=cid%>.initiateMultipartUpload(initRequest_<%=cid%>);
			String uploadId_<%=cid%> = initResponse_<%=cid%>.getUploadId();
			int partNumber_<%=cid%> = 1;
			boolean streamHasNext_<%=cid%> = true;
			try {
				while (useStream_<%=cid%>?streamHasNext_<%=cid%> : filePosition_<%=cid%> < inputFile_<%=cid%>.length()) {
				    if(!useStream_<%=cid%>){
            		     curPartSize_<%=cid%> = Math.min(partSizeInBytes_<%=cid%>, inputFile_<%=cid%>.length() - filePosition_<%=cid%>);
            		 }
            		 
            		com.amazonaws.services.s3.model.UploadPartRequest uploadRequest = new com.amazonaws.services.s3.model.UploadPartRequest()
                    	.withBucketName(<%=bucket%>)
                    	.withKey(<%=key%>).withUploadId(uploadId_<%=cid%>)
                    	.withPartNumber(partNumber_<%=cid%>).withPartSize(curPartSize_<%=cid%>);
                    if(useStream_<%=cid%>){
            		     uploadRequest.setInputStream(uploadStream_<%=cid%>);
            		 }else{
            		     uploadRequest.withFileOffset(filePosition_<%=cid%>).withFile(inputFile_<%=cid%>);
            		 }

            		// Upload part and add response to our list.
            		partTags_<%=cid%>.add(conn_<%=cid%>.uploadPart(uploadRequest).getPartETag());
            		partNumber_<%=cid%>++;

            		filePosition_<%=cid%> += curPartSize_<%=cid%>;
            		if(useStream_<%=cid%>){
            		     if(uploadStream_<%=cid%>!=null){
            		         uploadStream_<%=cid%>.close();
            		     }
            		     buffer_<%=cid%> = new byte[partSizeInBytes_<%=cid%>];
            		     streamHasNext_<%=cid%> = sourceStream_<%=cid%>.read(buffer_<%=cid%>) != -1;
            		     curPartSize_<%=cid%> = streamUtil_<%=cid%>.getLength(buffer_<%=cid%>);
            		     uploadStream_<%=cid%> = new java.io.ByteArrayInputStream(buffer_<%=cid%>);
            		 }
            		
        		}
        		com.amazonaws.services.s3.model.CompleteMultipartUploadRequest compRequest_<%=cid%> = new com.amazonaws.services.s3.model.CompleteMultipartUploadRequest(<%=bucket%>, <%=key%>,
                    uploadId_<%=cid%>, partTags_<%=cid%>);
            	conn_<%=cid%>.completeMultipartUpload(compRequest_<%=cid%>);
            } catch(java.lang.Exception uploadException_<%=cid%>) {
				conn_<%=cid%>.abortMultipartUpload(new com.amazonaws.services.s3.model.AbortMultipartUploadRequest(<%=bucket%>, <%=key%>, uploadId_<%=cid%>));
				throw uploadException_<%=cid%>;
            }
		}
		<%
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Upload the object successfully.");
		<%
		}
		%>
	}catch(java.lang.Exception e_<%=cid%>){
		<%
		if (("true").equals(dieOnError)) {
		%>
			throw(e_<%=cid%>);
		<%
		} else {
			if(isLog4jEnabled){
			%>
				log.error("<%=cid%> - " + e_<%=cid%>.getMessage());
			<%
			}
			%>
			System.err.println(e_<%=cid%>.getMessage());
		<%
		}
		if(!("true").equals(useExistingConn)) {
		%>
	}finally{
	    if(uploadStream_<%=cid%>!=null){
	        uploadStream_<%=cid%>.close();
	    }
		if(conn_<%=cid%> !=null){
			conn_<%=cid%>.shutdown();
		}
		<%
		}
		%>
	}
	        