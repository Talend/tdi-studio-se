<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.IConnection
    org.talend.core.model.process.IConnectionCategory 
    org.talend.core.model.process.ElementParameterParser 
    org.talend.designer.codegen.config.CodeGeneratorArgument
    org.talend.core.model.metadata.IMetadataTable 
    org.talend.core.model.metadata.IMetadataColumn
    org.talend.core.model.metadata.types.JavaTypesManager
    org.talend.core.model.metadata.types.JavaType
    java.util.List
" 
%>
	<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
<%
		CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
		INode node = (INode)codeGenArgument.getArgument();
		String cid = node.getUniqueName();

		String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
		String accessToken = ElementParameterParser.getValue(node, "__ACCESS_TOKEN__");
		String refreshToken = ElementParameterParser.getValue(node, "__REFRESH_TOKEN__");

		String clientId = ElementParameterParser.getValue(node, "__CLIENT_ID__");
		String clientSecret = ElementParameterParser.getValue(node, "__CLIENT_SECRET__");

		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	    String connectionKey = "\"conn_" + connection+"\"";

		String path = ElementParameterParser.getValue(node, "__PATH__");
		String filelistType = ElementParameterParser.getValue(node, "__LIST_MODE__");
		boolean includeSubDirectories = "true".equals(ElementParameterParser.getValue(node, "__INCLUDSUBDIR__"));

		final boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
				log4jFileUtil.componentStartInfo(node);

		List<IMetadataTable> metadatas = node.getMetadataList();
		IMetadataTable metadata = null;
		if ((metadatas!=null)&&(metadatas.size()>0)) {
			metadata = metadatas.get(0);
	    }

		List< ? extends IConnection> outputConnections = node.getOutgoingSortedConnections();

        String dataOutputConnection = null;
	    for(IConnection conn : outputConnections) {
	        if(conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {
	        	dataOutputConnection = conn.getName();
	        	break;
	        } // if(conn) end
	    } // for(conns) end

%>
<%
if(!"true".equals(useExistingConn)){
	String useProxy = ElementParameterParser.getValue(node,"__USE_PROXY__");
	String proxyHost = ElementParameterParser.getValue(node,"__PROXY_HOST__");
	String proxyPort = ElementParameterParser.getValue(node,"__PROXY_PORT__");
%>
	com.box.boxjavalibv2.BoxRESTClient <%=cid%>_httpClient = new com.box.boxjavalibv2.BoxRESTClient();
<%
	if("true".equals(useProxy)){
%>   
		<%=cid%>_httpClient.setConnectionTimeOut(3000);
		String <%=cid%>_proxyHost = <%=proxyHost%>;
		if (null == <%=cid%>_proxyHost || <%=cid%>_proxyHost.isEmpty())
		{
			throw new Exception("Proxy host can not be empty");
		}
		org.apache.http.HttpHost <%=cid%>_proxy = new org.apache.http.HttpHost(<%=cid%>_proxyHost, <%=proxyPort%>, "http");
		org.apache.http.client.HttpClient <%=cid%>_cl = <%=cid%>_httpClient.getRawHttpClient();
		<%=cid%>_cl.getParams().setParameter(org.apache.http.conn.params.ConnRoutePNames.DEFAULT_PROXY, <%=cid%>_proxy);
<%
	}else{
%>
<%
	}
%>
	com.box.boxjavalibv2.BoxClient <%=cid%>_client = null;
	String <%=cid%>_accessToken = <%=accessToken%>;
	String <%=cid%>_refreshToken = <%=refreshToken%>;
	String <%=cid%>_clientId = <%=clientId%>;
	String <%=cid%>_clientSecret = <%=clientSecret%>;
	if (null == <%=cid%>_clientId || <%=cid%>_clientId.isEmpty() || null == <%=cid%>_clientSecret || <%=cid%>_clientSecret.isEmpty()) {
		throw new Exception("Client Id and secret can not be empty");
	}
	<%=cid%>_client = new com.box.boxjavalibv2.BoxClient(<%=cid%>_clientId, <%=cid%>_clientSecret, null, null, <%=cid%>_httpClient, new com.box.boxjavalibv2.BoxConfigBuilder().build());
		
		if((<%=cid%>_accessToken == null || "".equals(<%=cid%>_accessToken.trim())) && (<%=cid%>_refreshToken == null || "".equals(<%=cid%>_refreshToken.trim()))) {
			throw new Exception("One of Access token or Refresh token should be provided");
		} else {
			java.util.Map<String, Object> <%=cid%>_map = new java.util.HashMap<String, Object>();
		if (<%=cid%>_accessToken != null && !<%=cid%>_accessToken.isEmpty()  && !<%=cid%>_accessToken.trim().matches("\"?\"?")
		 && <%=cid%>_refreshToken != null && !<%=cid%>_refreshToken.isEmpty() && !<%=cid%>_refreshToken.trim().matches("\"?\"?")) {
			<%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_ACCESS_TOKEN, <%=cid%>_accessToken);
			<%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_REFRESH_TOKEN, <%=cid%>_refreshToken);
		    <%=cid%>_client.getOAuthDataController().setAutoRefreshOAuth(true);
		} else if (<%=cid%>_accessToken != null && !<%=cid%>_accessToken.isEmpty() && !<%=cid%>_accessToken.trim().matches("\"?\"?")) {
		    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_ACCESS_TOKEN, <%=cid%>_accessToken);
		} else if (<%=cid%>_refreshToken != null && !"".equals(<%=cid%>_refreshToken.trim()) && !<%=cid%>_refreshToken.trim().matches("\"?\"?")) {
		    <%=cid%>_map.put(com.box.boxjavalibv2.dao.BoxOAuthToken.FIELD_REFRESH_TOKEN, <%=cid%>_refreshToken);
		    <%=cid%>_client.getOAuthDataController().setAutoRefreshOAuth(true);
		}
    <%=cid%>_client.authenticate(new com.box.boxjavalibv2.dao.BoxOAuthToken(<%=cid%>_map));
}
<%
} else {
%>
	com.box.boxjavalibv2.BoxClient <%=cid%>_client = (com.box.boxjavalibv2.BoxClient)globalMap.get(<%=connectionKey%>);
<%
}
%>
	String <%=cid%>_path = normalizePath(<%=path%>);
	com.box.boxjavalibv2.dao.BoxFolder <%=cid%>_rootFolder = <%=cid%>_client.getFoldersManager().getFolder("0", null);
	com.box.boxjavalibv2.dao.BoxItem <%=cid%>_boxItem;

	int <%=cid%>_slashPosition = <%=cid%>_path.indexOf("/");
	String <%=cid%>_rootFolderName = <%=cid%>_slashPosition == -1 ? <%=cid%>_path : <%=cid%>_path.substring(0, <%=cid%>_slashPosition);
	if (<%=cid%>_rootFolderName.equals("All Files")) {
		List<String> <%=cid%>_pathItems = new java.util.ArrayList<String>(java.util.Arrays.asList(<%=cid%>_path.split("/")));
		<%=cid%>_pathItems.remove(0);
		try {
			<%=cid%>_boxItem = getBoxItemRecursively(<%=cid%>_pathItems, <%=cid%>_rootFolder, <%=cid%>_client);
		} catch (Exception e) {
globalMap.put("<%=cid%>_ERROR_MESSAGE",e.getMessage());
			throw new Exception("<%=cid%> - " + "The path to file or directory was not found in " + <%=cid%>_path, e);
		}
	} else {
		throw new Exception("<%=cid%> - " + "The path to file or directory was not found in " + <%=cid%>_path);
	}

	java.util.List<com.box.boxjavalibv2.dao.BoxItem>  <%=cid%>_items = new java.util.ArrayList<>();
	if (<%=cid%>_boxItem.getType().equals("folder")) {
		com.box.boxjavalibv2.dao.BoxFolder <%=cid%>_boxFolder = (com.box.boxjavalibv2.dao.BoxFolder) <%=cid%>_boxItem;
		<%if(includeSubDirectories) {%>
			<%if(filelistType.equalsIgnoreCase("Directories")) {%>
				<%=cid%>_items = getChildrenRecursively(<%=cid%>_client, <%=cid%>_boxFolder, <%=cid%>_items, true, false);
			<%} else if (filelistType.equalsIgnoreCase("Files")) {%>
				<%=cid%>_items = getChildrenRecursively(<%=cid%>_client, <%=cid%>_boxFolder, <%=cid%>_items, false, true);
			<%} else {%>
				<%=cid%>_items = getChildrenRecursively(<%=cid%>_client, <%=cid%>_boxFolder, <%=cid%>_items, true, true);
			<%}%>
		<%} else {%>
			for (com.box.boxjavalibv2.dao.BoxTypedObject obj : <%=cid%>_boxFolder.getItemCollection().getEntries())
			{
				<%if(filelistType.equalsIgnoreCase("Directories")) {%>
						if(obj.getType().equals("folder"))
						{
							com.box.boxjavalibv2.dao.BoxFolder folder = <%=cid%>_client.getFoldersManager().getFolder(obj.getId(), null);
							<%=cid%>_items.add(folder);
						}
				<%} else if (filelistType.equalsIgnoreCase("Files")) {%>
						if (obj.getType().equals("file"))
						{
							com.box.boxjavalibv2.dao.BoxFile file = <%=cid%>_client.getFilesManager().getFile(obj.getId(), null);
							<%=cid%>_items.add(file);
						}
				<%} else {%>
						if(obj.getType().equals("folder"))
						{
							com.box.boxjavalibv2.dao.BoxFolder folder = <%=cid%>_client.getFoldersManager().getFolder(obj.getId(), null);
							<%=cid%>_items.add(folder);
						}
						else if (obj.getType().equals("file"))
						{
							com.box.boxjavalibv2.dao.BoxFile file = <%=cid%>_client.getFilesManager().getFile(obj.getId(), null);
							<%=cid%>_items.add(file);
						}
				<%}%>
			}
		<%}%>
	} else if (<%=cid%>_boxItem.getType().equals("file")) {
		com.box.boxjavalibv2.dao.BoxFile <%=cid%>_boxFile = (com.box.boxjavalibv2.dao.BoxFile) <%=cid%>_boxItem;
		<%=cid%>_items.add(<%=cid%>_boxFile);
	}

	for (com.box.boxjavalibv2.dao.BoxItem <%=cid%>_item : <%=cid%>_items) {
		String <%=cid%>_itemPath = getBoxItemPath(<%=cid%>_item);
		globalMap.put("<%=cid%>_NAME", <%=cid%>_item.getName());
		globalMap.put("<%=cid%>_ID", <%=cid%>_item.getId());
		globalMap.put("<%=cid%>_FILE_PATH", <%=cid%>_itemPath);
		globalMap.put("<%=cid%>_FILE_DIRECTORY", <%=cid%>_itemPath + <%=cid%>_item.getName());
		globalMap.put("<%=cid%>_TYPE",<%=cid%>_item.getType());
		globalMap.put("<%=cid%>_LAST_MODIFIED", <%=cid%>_item.getModifiedAt());
		globalMap.put("<%=cid%>_SIZE", <%=cid%>_item.getSize());
