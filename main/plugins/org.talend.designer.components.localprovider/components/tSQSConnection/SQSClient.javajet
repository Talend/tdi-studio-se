<%@ jet 
%>
<%
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	
	String accessKey = ElementParameterParser.getValue(node, "__ACCESS_KEY__");

	boolean configClient = "true".equals(ElementParameterParser.getValue(node, "__CONFIG_CLIENT__"));
	String useExistingConn = ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__");
	List<Map<String,String>> clientConfiguration = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node,"__CLIENT_CONFIGURATION__");
	String region = ElementParameterParser.getValue(node,"__REGION__");
	
	boolean assumeRole = "true".equals(ElementParameterParser.getValue(node, "__ASSUME_ROLE__"));
	String arn = ElementParameterParser.getValue(node,"__ARN__");
	String roleSessionName = ElementParameterParser.getValue(node,"__ROLE_SESSION_NAME__");
	String externalId = ElementParameterParser.getValue(node,"__EXTERNALID__");
	String serialNumber = ElementParameterParser.getValue(node,"__SERIALNUMBER__");
	String tokenCode = ElementParameterParser.getValue(node,"__TOKENCODE__");
	List<Map<String, String>> tagInfoList = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__TAGS__");
	List<Map<String, String>> policyList = (List<Map<String, String>>)ElementParameterParser.getObjectValue(node, "__POLICY_TABLE__");
	String policyJson = ElementParameterParser.getValue(node,"__POLICY__");
	
	boolean setStsEndpoint = "true".equals(ElementParameterParser.getValue(node,"__SET_STS_ENDPOINT__"));
	String stsEndpoint = ElementParameterParser.getValue(node,"__STS_ENDPOINT__");
	String signingRegion = ElementParameterParser.getValue(node,"__SIGNING_REGION__");
	
	boolean set_signingRegion = (signingRegion!=null && !signingRegion.isEmpty() && !"DEFAULT".equalsIgnoreCase(signingRegion));
	
	String sessionDuration = ElementParameterParser.getValue(node,"__SESSION_DURATION__");
	if(sessionDuration == null || sessionDuration.isEmpty()) {
		sessionDuration = "15";
	}
    final String AWSTracker = org.talend.core.utils.TrackerUtil.getAWSTracker();
	
	if(("true").equals(useExistingConn)) {
		String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
		String conn = "conn_" + connection;;
		%>
		com.amazonaws.services.sqs.AmazonSQS conn_<%=cid%> = (com.amazonaws.services.sqs.AmazonSQSClient)globalMap.get("<%=conn%>");
		<%
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Get an free connection from " + "<%=connection%>" + ".");
		<%
		}
	}else{
	%>
	    <%
	    if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Creating new connection.");
		<%
		}
		boolean inherit_credentials = "true".equals(ElementParameterParser.getValue(node, "__INHERIT_CREDENTIALS__"));
		if(!inherit_credentials) {
	    	String passwordFieldName = "__SECRET_KEY__";
	    %>
    
    	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>

		com.amazonaws.auth.AWSCredentials credentials_<%=cid%> = new com.amazonaws.auth.BasicAWSCredentials(<%=accessKey%>,decryptedPassword_<%=cid%>);
		com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_<%=cid%> = new com.amazonaws.internal.StaticCredentialsProvider(credentials_<%=cid%>);
		<%
		} else {
		%>
		com.amazonaws.auth.AWSCredentialsProvider credentialsProvider_<%=cid%> = new com.amazonaws.auth.EC2ContainerCredentialsProviderWrapper();
		<%
		}
		%>
		com.amazonaws.ClientConfiguration cc_<%=cid%> = new com.amazonaws.ClientConfiguration();
		cc_<%=cid%>.setUserAgent(routines.system.Constant.getUserAgent("<%=AWSTracker%>"));
		<%
		if(configClient && clientConfiguration.size()>0){
			boolean setBuffer = false;
			for(Map<String,String> map :clientConfiguration){
				String client_parameter = map.get("CLIENT_PARAMETER");
				String value = map.get("VALUE");
				if(!setBuffer && ("SocketSendBufferSizeHints".equals(client_parameter) || "SocketReceiveBufferSizeHints".equals(client_parameter))){
					setBuffer=true;
					%>
					int scketSendBufferSizeHints_<%=cid%> = 0;
					int socketReceiveBufferSizeHints_<%=cid%> = 0;
				<%
				}
				if("SocketSendBufferSizeHints".equals(client_parameter)){
				%>
					scketSendBufferSizeHints_<%=cid%> = <%=value%>;
				<%
				}else if("SocketReceiveBufferSizeHints".equals(client_parameter)){
				%>
					socketReceiveBufferSizeHints_<%=cid%> = <%=value%>;
				<%
				}else if("Protocol".equals(client_parameter)){
				%>
					cc_<%=cid%>.setProtocol(com.amazonaws.Protocol.<%=value.toUpperCase().replaceAll("\"","")%>);
				<%
				}else{
				%>
					cc_<%=cid%>.set<%=client_parameter%>(<%=value%>);
				<%
				}
			}
			if(setBuffer){
			%>
				cc_<%=cid%>.setSocketBufferSizeHints(scketSendBufferSizeHints_<%=cid%>,socketReceiveBufferSizeHints_<%=cid%>);
			<%
			}
		}
		if(assumeRole) {
			int policyListSize = policyList.size();
			int tagInfoListSize = tagInfoList.size();
		%>
			int policyListSize_<%=cid%> = <%=policyListSize%>;
			int tagInfoListSize_<%=cid%> = <%=tagInfoListSize%>;
			int sessionDurationSeconds_<%=cid%> = <%=sessionDuration%> * 60;
			List<com.amazonaws.services.securitytoken.model.PolicyDescriptorType> policyArnList_<%=cid%> = null;
    			
    		<%
				if(policyListSize > 0){
	        %>
	                policyArnList_<%=cid%> = new java.util.ArrayList<com.amazonaws.services.securitytoken.model.PolicyDescriptorType>();
	        <%
	        		for(int policyListIndex = 0; policyListIndex < policyListSize; policyListIndex++){
	        			String policyArn = policyList.get(policyListIndex).get("POLICY_ARN");
	        %>
	        			com.amazonaws.services.securitytoken.model.PolicyDescriptorType pdt_<%=cid%> = 
	        				new com.amazonaws.services.securitytoken.model.PolicyDescriptorType().withArn(<%=policyArn%>);
	        			policyArnList_<%=cid%>.add(pdt_<%=cid%>);
	        <%
	        		}
	        	}
        	%>
    		List<com.amazonaws.services.securitytoken.model.Tag> tagList_<%=cid%> = null;
    		List<String> tranTagKeys_<%=cid%> = null;
    		
    		<%
	        	if(tagInfoListSize > 0){
	        %>
	        		tagList_<%=cid%> = new java.util.ArrayList<com.amazonaws.services.securitytoken.model.Tag>();
	        		tranTagKeys_<%=cid%> = new java.util.ArrayList<String>();
	        <%
	        		for(int tagInfoListIndex = 0; tagInfoListIndex < tagInfoListSize; tagInfoListIndex++){
	        			String tagKey = tagInfoList.get(tagInfoListIndex).get("TAG_KEY");
	        			String tagValue = tagInfoList.get(tagInfoListIndex).get("TAG_VALUE");
	        			String tagTransitive = tagInfoList.get(tagInfoListIndex).get("TAG_TRANSITIVE");
	        %>
	        			com.amazonaws.services.securitytoken.model.Tag tag_<%=cid%> = 
	        				new com.amazonaws.services.securitytoken.model.Tag().withKey(<%=tagKey%>).withValue(<%=tagValue%>);
	        			tagList_<%=cid%>.add(tag_<%=cid%>);
	        			
	        			if("true".equals(<%=tagTransitive%>))
	        				tranTagKeys_<%=cid%>.add(<%=tagKey%>);
	        <%
	        		}
				}
			%>
			
			com.amazonaws.services.securitytoken.AWSSecurityTokenService stsClient_<%=cid%> = 
					com.amazonaws.services.securitytoken.AWSSecurityTokenServiceClientBuilder.standard()
					.withCredentials(credentialsProvider_<%=cid%>)
					.withClientConfiguration(cc_<%=cid%>)
					<%if(setStsEndpoint && stsEndpoint != null && !stsEndpoint.isEmpty()){%>
					
						<%if(set_signingRegion){%>
						.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(<%=stsEndpoint%>, <%=signingRegion%>))
						<%}else{%>
						.withEndpointConfiguration(new com.amazonaws.client.builder.AwsClientBuilder.EndpointConfiguration(<%=stsEndpoint%>, null))
						<%}%>
						
					<%}else{%>
					
						<%if(set_signingRegion){%>
						.withRegion(<%=signingRegion%>)
						<%}else{%>
						.withRegion(com.amazonaws.regions.Regions.US_EAST_1)
						<%}%>
						
					<%}%>
					.build();
					
					
			com.amazonaws.services.securitytoken.model.AssumeRoleRequest assumeRoleRequest_<%=cid%> = 
					new com.amazonaws.services.securitytoken.model.AssumeRoleRequest()
					.withDurationSeconds(sessionDurationSeconds_<%=cid%>)
					<%if(externalId != null && !externalId.isEmpty() && !("\"\"").equals(externalId)){%>
					.withExternalId(<%=externalId%>)
					<%}%>
					<%if(policyJson != null && !policyJson.isEmpty() && !("\"\"").equals(policyJson)){%>
	                .withPolicy(<%=policyJson%>)
	                <%}%>
	                .withRoleArn(<%=arn%>)
	                .withRoleSessionName(<%=roleSessionName%>)
	                <%if(serialNumber != null && !serialNumber.isEmpty() && !("\"\"").equals(serialNumber)){%>
	                .withSerialNumber(<%=serialNumber%>)
	                <%}%>
	                <%if(tokenCode != null && !tokenCode.isEmpty() && !("\"\"").equals(tokenCode)){%>
	                .withTokenCode(<%=tokenCode%>)
	                <%}%>
	                ;
            
            if(policyListSize_<%=cid%> > 0 &&  policyArnList_<%=cid%> != null && policyArnList_<%=cid%>.size() > 0){
            	assumeRoleRequest_<%=cid%>.withPolicyArns(policyArnList_<%=cid%>);
            }
	                
	        if(tagInfoListSize_<%=cid%> > 0 && tagList_<%=cid%> != null && tagList_<%=cid%>.size() > 0){
	            assumeRoleRequest_<%=cid%>.withTags(tagList_<%=cid%>);
	        }
	        
	        if(tagInfoListSize_<%=cid%> > 0 && tranTagKeys_<%=cid%> != null  && tranTagKeys_<%=cid%>.size() > 0){
	            assumeRoleRequest_<%=cid%>.withTransitiveTagKeys(tranTagKeys_<%=cid%>);
	        }
	                
			com.amazonaws.services.securitytoken.model.AssumeRoleResult assumeRoleResult_<%=cid%> = stsClient_<%=cid%>.assumeRole(assumeRoleRequest_<%=cid%>);
			com.amazonaws.services.securitytoken.model.Credentials assumeRoleCred_<%=cid%> = assumeRoleResult_<%=cid%>.getCredentials();
			com.amazonaws.auth.BasicSessionCredentials roleSessionCredentials_<%=cid%> = 
				new com.amazonaws.auth.BasicSessionCredentials(
					assumeRoleCred_<%=cid%>.getAccessKeyId(),
					assumeRoleCred_<%=cid%>.getSecretAccessKey(),
					assumeRoleCred_<%=cid%>.getSessionToken());
			credentialsProvider_<%=cid%> = new com.amazonaws.auth.AWSStaticCredentialsProvider(roleSessionCredentials_<%=cid%>);
			
		<%
		}
		%>
		com.amazonaws.services.sqs.AmazonSQS conn_<%=cid%> = new com.amazonaws.services.sqs.AmazonSQSClient(
					credentialsProvider_<%=cid%>,
					cc_<%=cid%>);
		<%
		if(region!=null && !region.isEmpty() && !"DEFAULT".equalsIgnoreCase(region)){
		%>
			conn_<%=cid%>.setRegion(com.amazonaws.regions.RegionUtils.getRegion(<%=region%>));
		<%
		}
		if(isLog4jEnabled){
		%>	
			log.info("<%=cid%> - Creating new connection successfully.");
		<%
		}
	}
	%>
