<%@ jet
	imports="
		org.talend.core.model.process.INode
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.runprocess.ProcessorUtilities
		java.util.List
	"
%>

<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    String cid = node.getUniqueName();
    String confLib = ElementParameterParser.getValue(node, "__CONF_LIB__");
    Boolean setHadoopConf = ElementParameterParser.getBooleanValue(node, "__SET_HADOOP_CONF__");
    String customHadoopConfPath = ElementParameterParser.getValue(node, "__HADOOP_CONF_SPECIFIC_JAR__");
    if (setHadoopConf == null) {
        setHadoopConf = Boolean.FALSE;
    }
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
%>

<% if((confLib != null && confLib.length() > 0) || setHadoopConf){%>

String libPath_<%=cid %> = "";

<% if (setHadoopConf) { 

    if (isLog4jEnabled) {
        %>
        log.info("hadoop conf jar : " + <%=customHadoopConfPath %>);
        <%
    }
    %>
    libPath_<%=cid %> = <%=customHadoopConfPath %>;

<% } else { %>

class DealJobLibrary_<%=cid%> {

    public String getConfJarName(String confLib, String extraId) {
        String confJarName = confLib;
        if (extraId != null && extraId.length() > 0) {
            String jarName = confLib.substring(0, confLib.lastIndexOf("."));
            String jarExt = confLib.substring(confLib.lastIndexOf("."));
            confJarName = jarName + "_" + extraId + jarExt;
        }
        return confJarName;
    }

    public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
        String classPathLine = "";
        String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
        if (isNeedAddLibsPath( crcMapPath)) {
            java.util.Map<String, String> crcMap = null;
            java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath));
            crcMap = (java.util.Map<String, String>) ois.readObject();
            ois.close();
            classPathLine = addLibsPath(originalClassPathLine, crcMap);
        } else {
            classPathLine = originalClassPathLine;
        }
        return classPathLine;
    }

    private boolean isNeedAddLibsPath(String crcMapPath) {
        if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
            return false;
        }
        return true;
    }


    private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
        for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
            line = adaptLibPaths(line, entry);
        }
        return line;
    }

    private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
        String jarName = entry.getValue();
        String crc = entry.getKey();
        String libStringFinder = "../lib/" + jarName;
        if (line.contains(libStringFinder)) {
            line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
        } else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
            line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
        } else if (line.contains(";" + jarName + ";")) {
            line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
        }
        return line;
    }

}

DealJobLibrary_<%=cid%> dealJobLibrary = new DealJobLibrary_<%=cid%>();
String confJarName = dealJobLibrary.getConfJarName(<%=confLib %>, this.contextStr);


<%
String libFolder = ProcessorUtilities.isExportConfig() ? "../lib" : ProcessorUtilities.getJavaProjectLibFolder().getAbsolutePath().replace("\\", "/");
%>    
libPath_<%=cid%> = dealJobLibrary.replaceJarPathsFromCrcMap(new java.io.File("<%=libFolder%>/" + confJarName).getAbsolutePath());
java.io.File fileConfJar = new java.io.File(libPath_<%=cid%>);
    
// Checking standard hadoop conf 
if (!fileConfJar.exists()) {
    <% 
    if (isLog4jEnabled) { 
        %>
        log.info("Hadoop configuration '" + confJarName + "' does not exist");
        <% 
    } 
    %>
    confJarName = confJarName.replace("_"+this.contextStr,"");
    libPath_<%=cid%> = dealJobLibrary.replaceJarPathsFromCrcMap(new java.io.File("<%=libFolder%>/" + confJarName).getAbsolutePath());
    fileConfJar = new java.io.File(libPath_<%=cid%>);
}

// Checking hadoop conf without timestamp suffix 
if (!fileConfJar.exists()) {
    <% 
    if (isLog4jEnabled) { 
        %>
        log.info("Hadoop configuration '" + confJarName + "' does not exist");
        <% 
    } 
    %>
    confJarName = confJarName.replaceFirst("(_[0-9]+)","");
    libPath_<%=cid%> = dealJobLibrary.replaceJarPathsFromCrcMap(new java.io.File("<%=libFolder%>/" + confJarName).getAbsolutePath());
    fileConfJar = new java.io.File(libPath_<%=cid%>);
}

if (!fileConfJar.exists()) {
    <% 
    if (isLog4jEnabled) { 
        %>
        log.info("Hadoop configuration '" + confJarName + "' does not exist");
        <% 
    } 
    %>
    //in case of windows and context and RE + JS local, this.contextStr is the context (Default ie) + a TS, and the hadop conf is like 
    //hadoop-conf-CLUSTER_CONTEXT.jar, so we get rid of the timestamp
    confJarName = <%=confLib%>.replaceAll(".jar", "") + "_" + this.contextStr.replaceFirst("(_[0-9]+)","") + ".jar";
    libPath_<%=cid%> = dealJobLibrary.replaceJarPathsFromCrcMap(new java.io.File("<%=libFolder%>/" + confJarName).getAbsolutePath());
    fileConfJar = new java.io.File(libPath_<%=cid%>);
}

if (!fileConfJar.exists()) {
    <% 
    if (isLog4jEnabled) { 
        %>
        log.info("Hadoop configuration '" + confJarName + "' does not exist");
        log.info("at : "+fileConfJar.toString());
        <% 
    } 
    %>
    throw new RuntimeException("Hadoop configuration jar not found");
}
<%
if (isLog4jEnabled) { 
    %>
    log.info("Hadoop configuration '" + confJarName + "' used");
    <% 
} 
}
%>

java.net.URLClassLoader currentLoader<%=cid %> = (java.net.URLClassLoader) Thread.currentThread().getContextClassLoader();
java.lang.reflect.Method method_<%=cid %> = java.net.URLClassLoader.class.getDeclaredMethod("addURL", new Class[] { java.net.URL.class });
method_<%=cid %>.setAccessible(true);
method_<%=cid %>.invoke(currentLoader<%=cid %>, new Object[] { new java.io.File(libPath_<%=cid %>).toURL() });

<%}%>
