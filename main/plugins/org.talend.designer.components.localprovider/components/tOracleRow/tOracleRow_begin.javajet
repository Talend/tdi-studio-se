<%@ jet
imports="
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser
		org.talend.designer.codegen.config.CodeGeneratorArgument
"
%>
<%@ include file="../templates/DB/Row/HelpClass.javajet"%>
<%

	class DBRowBeginUtil extends DefaultDBRowUtil{

		public void beforeComponentProcess(INode node){
          super.beforeComponentProcess(node);
          cid = node.getUniqueName();
          boolean  useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
          if(!useExistingConn) {
              String dbVersion =  ElementParameterParser.getValue(node, "__DB_VERSION__");
			     if("ORACLE_11".equals(dbVersion) || "ORACLE_11-6".equals(dbVersion) || "ORACLE_12".equals(dbVersion) ){
	              boolean useSSL = "true".equals(ElementParameterParser.getValue(node,"__USE_SSL__"));
	              String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
	              if("ORACLE_RAC".equals(connectionType) && useSSL){
	                  String walletType = ElementParameterParser.getValue(node,"__WALLET_TYPE__");
	                  if("PKCS12".equals(walletType)){
	                  %>
	                      java.security.Security.insertProviderAt(new oracle.security.pki.OraclePKIProvider(), 3);
	                  <%
	                  }
	                  if("SSO".equals(walletType)){
	                  %>
	                      java.security.Security.addProvider(new oracle.security.pki.OraclePKIProvider());
	                  <%
	                  }
	              }
	          }
          }
    	}

		public void setURL(INode node) {
			String localServiceName = ElementParameterParser.getValue(node, "__LOCAL_SERVICE_NAME__");
			String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
			String jdbcURL = ElementParameterParser.getValue(node, "__JDBC_URL__");
			String rac_url = ElementParameterParser.getValue(node, "__RAC_URL__");
%>
			String url_<%=cid%> = null;
<%
			if("ORACLE_RAC".equals(connectionType)) {
%>
				url_<%=cid %> = <%=rac_url%>;
<%
			} else if(("ORACLE_SID").equals(connectionType)) {
%>
				url_<%=cid %> = "jdbc:oracle:thin:@" + <%=dbhost%> + ":" + <%=dbport%> + ":" + <%=dbname%>;
<%
			} else if(("ORACLE_SERVICE_NAME").equals(connectionType)) {
%>
				url_<%=cid %> = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + <%=dbhost%> + ")(port=" + <%=dbport%> + "))(connect_data=(service_name=" + <%=dbname%> + ")))";
<%
			} else if(("ORACLE_OCI").equals(connectionType)) {
%>
				url_<%=cid %> = "jdbc:oracle:oci8:@" + <%=localServiceName%>;
<%
			}else if(("ORACLE_WALLET").equals(connectionType)) {
%>
	    			url_<%=cid%> = <%=jdbcURL%>;
<%
			}
		}

		public void newConnection(){
			if(dbproperties == null || ("\"\"").equals(dbproperties) || ("").equals(dbproperties)) {
				super.newConnection();
			} else {
			   String dbVersion =  ElementParameterParser.getValue(node, "__DB_VERSION__");
			   boolean useSSL = false;
			   if("ORACLE_11".equals(dbVersion) || "ORACLE_11-6".equals(dbVersion) || "ORACLE_12".equals(dbVersion) ){
				    useSSL = "true".equals(ElementParameterParser.getValue(node,"__USE_SSL__"));
				}
				String connectionType = ElementParameterParser.getValue(node, "__CONNECTION_TYPE__");
			%>
				java.util.Properties atnParamsPrope_<%=cid%> = new java.util.Properties();
<%
            if("ORACLE_RAC".equals(connectionType) && useSSL){
%>
			       if(dbUser_<%=cid%>!=null && dbPwd_<%=cid%>!=null && !"".equals(dbUser_<%=cid%>)&& !"".equals(dbPwd_<%=cid%>)){
			           atnParamsPrope_<%=cid%>.put("user",dbUser_<%=cid%>);
			           atnParamsPrope_<%=cid%>.put("password",dbPwd_<%=cid%>);
					 }
<%
				}else{
%>
			       atnParamsPrope_<%=cid%>.put("user",dbUser_<%=cid%>);
			       atnParamsPrope_<%=cid%>.put("password",dbPwd_<%=cid%>);
<%
				}
%>
	         if(<%= dbproperties %> != null && !"\"\"".equals(<%= dbproperties %>) && !"".equals(<%= dbproperties %>)){
                atnParamsPrope_<%=cid%>.load(new java.io.ByteArrayInputStream(<%=dbproperties%>.replace("&", "\n").getBytes()));
            }
				conn_<%=cid%> = java.sql.DriverManager.getConnection(url_<%=cid%>, atnParamsPrope_<%=cid%>);
			<%
			}
		}

		public String getDirverClassName(INode node){
			String dbVersion =  ElementParameterParser.getValue(node, "__DB_VERSION__");
			if("ORACLE_11".equals(dbVersion) || "ORACLE_11-6".equals(dbVersion) || "ORACLE_12".equals(dbVersion) ){
			    return "oracle.jdbc.OracleDriver";
			}else {
				return "oracle.jdbc.driver.OracleDriver";
			}
		}

		public void afterConnection(INode node){
			String use_NB_Line = ElementParameterParser.getValue(node, "__USE_NB_LINE__");
			//feature 0010425
			if ("NB_LINE_INSERTED".equals(use_NB_Line)) {
			%>
				int nb_line_inserted_<%=cid%> = 0;
			<%
			} else if ("NB_LINE_UPDATED".equals(use_NB_Line)) {
			%>
				int nb_line_update_<%=cid%> = 0;
			<%
			} else if ("NB_LINE_DELETED".equals(use_NB_Line)) {
			%>
				int nb_line_deleted_<%=cid%> = 0;
			<%
			}//end feature 0010425
		}
	}
	dbRowBeginUtil = new DBRowBeginUtil();
%>
<%@ include file="../templates/DB/Row/AbstractDBRowBegin.javajet"%>
