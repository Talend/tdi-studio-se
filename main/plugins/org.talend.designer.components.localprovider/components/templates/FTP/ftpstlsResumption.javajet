<%@ jet 
%>

	class MyTrust_<%=cid %> {

		private javax.net.ssl.TrustManager[] getTrustManagers() 
		throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, 
			java.security.cert.CertificateException, java.security.UnrecoverableKeyException,
			java.io.IOException {
			java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");

<%
			passwordFieldName = "__KEYSTORE_PASS__";
			if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
%> 
				String decryptedKeyStorePassword_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
<%
			} else {
%>
				String decryptedKeyStorePassword_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>; 
<%
			}
%>
			ks.load(new java.io.FileInputStream(<%=keystoreFile%>), decryptedKeyStorePassword_<%=cid%>.toCharArray());
			javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
			tmf.init(ks);
			return tmf.getTrustManagers();
		}
	}
	
		class SSLSessionReuseFTPSClient_<%=cid %> extends org.apache.commons.net.ftp.FTPSClient {

		public SSLSessionReuseFTPSClient_<%=cid %>(boolean isImplicit, javax.net.ssl.SSLContext context) {
			super(isImplicit, context);
		}

		// changed to support TLS session resumption
		@Override
		protected void _prepareDataSocket_(final java.net.Socket socket) throws IOException {
			if(socket instanceof javax.net.ssl.SSLSocket) {
				final javax.net.ssl.SSLSession session = ((javax.net.ssl.SSLSocket) _socket_).getSession();
				final javax.net.ssl.SSLSessionContext context = session.getSessionContext();
				try {
					final java.lang.reflect.Field sessionHostPortCache = context.getClass().getDeclaredField("sessionHostPortCache");
					sessionHostPortCache.setAccessible(true);
					final Object cache = sessionHostPortCache.get(context);
					final java.lang.reflect.Method putMethod = cache.getClass().getDeclaredMethod("put", Object.class, Object.class);
					putMethod.setAccessible(true);
					final java.lang.reflect.Method getHostMethod = socket.getClass().getDeclaredMethod("getHost");
					getHostMethod.setAccessible(true);
					Object host = getHostMethod.invoke(socket);
					final String key = String.format("%s:%s", host, String.valueOf(socket.getPort())).toLowerCase(java.util.Locale.ROOT);
					putMethod.invoke(cache, key, session);
				} catch(Exception e) {
<%
					if (isLog4jEnabled) {
%>
						log.error("Can't adapt ftps client to support TLS session resumption");
<%
					}
%>
					throw new RuntimeException(e);
				}
			}
		}
	}