<%
if(("UPDATE").equals(dataAction) || ("INSERT_OR_UPDATE").equals(dataAction) || ("UPDATE_OR_INSERT").equals(dataAction)) {
    boolean isDynamicSchema = false;
    int updateKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isUpdateKey()) {
                updateKeyCount++;
            }
            if (column.isDynamic()) {
                isDynamicSchema = true;
            }
        }
%>
        int updateKeyCount_<%=cid%> = <%=updateKeyCount%>;
        if(updateKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_<%=cid%> == <%=stmtStructure.size() %> && <%=!isDynamicSchema%>) {
<%
            String errorMessageUpdateKeys = "For update, every Schema column can not be a key";
            if(("UPDATE").equals(dataAction)) {
%>        
                throw new RuntimeException("<%=errorMessageUpdateKeys%>");
<%
            } else {
                if (("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"))) {
%>
                    log.warn("<%=errorMessageUpdateKeys%>");
<%
                } else {
%>
                    System.err.println("<%=errorMessageUpdateKeys%>");
<%                  
                }
            }
%>
        }
<%
    }
} else if(("DELETE").equals(dataAction)) {
    int deleteKeyCount = 0;
    if(stmtStructure != null) {
        for(Column column : stmtStructure) {
            if(column.isDeleteKey()) {
                deleteKeyCount++;
            }
        }
%>
        int deleteKeyCount_<%=cid%> = <%=deleteKeyCount%>;
        if(deleteKeyCount_<%=cid%> < 1) {
            throw new RuntimeException("For delete, Schema must have a key");
        }
<%
    }
}
%>