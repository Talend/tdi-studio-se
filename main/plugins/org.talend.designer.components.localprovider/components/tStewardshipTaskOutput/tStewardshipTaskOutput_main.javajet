<%@ jet 
	imports="
		org.talend.core.model.process.INode 
		org.talend.core.model.process.ElementParameterParser 
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn 
		org.talend.core.model.process.IConnection
		org.talend.core.model.process.IConnectionCategory
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.metadata.types.JavaTypesManager
		org.talend.core.model.metadata.types.JavaType
		java.util.List 
    	java.util.Map		
	" 
%>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/Log4j/LogUtil.javajet"%>
<% 
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    LogUtil logUtil = new LogUtil(node);
    String cid = node.getUniqueName();	
    
	String loopingColumn = ElementParameterParser.getValue(node, "__LOOPING_COLUMN__");
	String maxTaskCount = ElementParameterParser.getValue(node, "__NB_TASKS_PER_COMMIT__");
	String taskName = ElementParameterParser.getValue(node, "__TASKNAME__");
	String type = ElementParameterParser.getValue(node, "__TASKTYPE__");
	String createdBy = ElementParameterParser.getValue(node, "__CREATED_BY__");
	String owner = ElementParameterParser.getValue(node, "__OWNER__");
	String starRanking = ElementParameterParser.getValue(node, "__STAR_RANKING__");
	String tags = ElementParameterParser.getValue(node, "__TAGS__");
	
	String recordType = ElementParameterParser.getValue(node, "__RECORD_TYPE__");
	
	String source = ElementParameterParser.getValue(node, "__SOURCE__");
	String score = ElementParameterParser.getValue(node, "__SCORE__");
	String weights = ElementParameterParser.getValue(node, "__WEIGHTS__");
	
	final boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
	
	List<Map<String, String>> extraInfos = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__EXTRA_INFO__");
	List<Map<String, String>> recordColumns = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__RECORD_COLUMN__");
	
	final String RESOLUTION_TYPE = "1";

	class DataUtil{
		Map<String,String> colTypeMap = new java.util.HashMap<String,String>();
		Map<String,JavaType> colTalendTypeMap = new java.util.HashMap<String,JavaType>();
	    Map<String,Boolean> colKeyMap = new java.util.HashMap<String,Boolean>();
	    Map<String,String> colPatternMap = new java.util.HashMap<String,String>();
		public DataUtil(IMetadataTable metadata){
			List<IMetadataColumn> columns = metadata.getListColumns();
	        int sizeColumns = columns.size();
	        for (int i = 0; i < sizeColumns; i++) {
	        	IMetadataColumn column = columns.get(i);
	        	JavaType javaType = JavaTypesManager.getJavaTypeFromId(column.getTalendType());
	        	String typeName;
	        	if(javaType == JavaTypesManager.DATE){
	        		String patternValue = column.getPattern() == null || column.getPattern().trim().length() == 0 ? null : column.getPattern();
	        		colPatternMap.put(column.getLabel(),patternValue);
	        		typeName = "date";
	        	}else if(javaType == JavaTypesManager.BIGDECIMAL){
	        		typeName = "decimal";
	        	}else{
	        		typeName = JavaTypesManager.getShortNameFromJavaType(javaType).toLowerCase();
	        	}
	        	//JavaTypesManager.getShortNameFromJavaType(javaType)
	        	colTypeMap.put(column.getLabel(),typeName);
	        	colKeyMap.put(column.getLabel(),column.isKey());
	        	colTalendTypeMap.put(column.getLabel(),javaType);
	        }
		}
	    public String getValueExpression(String connName,String columnName){
	    	if(colTalendTypeMap.get(columnName) == JavaTypesManager.DATE){
	    		return "("+connName+"."+columnName+"!=null)?FormatterUtils.format_Date("+connName+"."+columnName+","+colPatternMap.get(columnName)+"):null";
	    	}else{
	    		return "("+connName+"."+columnName+"!=null)?String.valueOf("+connName+"."+columnName+"):null";
	    	}
		}
		public String getColType(String columnName){
			return colTypeMap.get(columnName);
		}
		public String isKey(String columnName){
			return colKeyMap.get(columnName)?"1":"0";
		}
	}

	List<IMetadataTable> metadatas = node.getMetadataList();
	if ((metadatas!=null)&&(metadatas.size()>0)) {//1
	    IMetadataTable metadata = metadatas.get(0);
	    if (metadata!=null) {//2
	
	    	List< ? extends IConnection> conns = node.getIncomingConnections();
	    	for (IConnection conn : conns) {//3
	    		if (conn.getLineStyle().hasConnectionCategory(IConnectionCategory.DATA)) {//4
	    			DataUtil dataUtil = new DataUtil(metadata);
					%>
					<%if(RESOLUTION_TYPE.equals(type)){%>
						if(!taskFlag_<%=cid%>.equals(<%=dataUtil.getValueExpression(conn.getName(),loopingColumn)%>)){
					<%}%>
					if(targetRecordExisted_<%=cid%>){
						record_<%=cid%> = task_<%=cid%>.addTargetRecord();
						<%
						if(recordColumns.size()>0){
							for(Map<String, String> recordColumn:recordColumns){
							%>
				    			record_<%=cid%>.addSrcColumn(recordColumn_<%=recordColumn.get("CONTENT")%>_<%=cid%>,recordColumn_<%=recordColumn.get("CONTENT")%>_Value_<%=cid%>,recordColumn_<%=recordColumn.get("CONTENT")%>_Type_<%=cid%>,recordColumn_<%=recordColumn.get("CONTENT")%>_Key_<%=cid%>);
							<%
							}
						}
						%>
						targetRecordExisted_<%=cid%> = false;
					}
					
					<% logUtil.debug("\"Task \"+ (nb_line_"+cid+"+1) + \" was generated.\"");%>
					
					if(tasks_<%=cid%>.getTaskCount()>=<%=maxTaskCount%>){
					
					    <% logUtil.info("\"Uploading \"+ tasks_"+cid+".getTaskCount() + \" tasks...\"");%>
					    
						String content = tasks_<%=cid%>.getTasksAndClear();
						//System.out.println(content);
						boolean loadResult_<%=cid%> = taskLoadClient_<%=cid%>.doLoad(content);
						if(!loadResult_<%=cid%>){
						    
						    <% logUtil.info("\"An error occured while uploading tasks.\"");%>
							
							System.err.println("An error occured while uploading tasks.");
						}
						else{
						    <% logUtil.info("\"Uploaded tasks successfully.\"");%>
						}
					}
					nb_line_<%=cid%> ++;
					task_<%=cid%> = tasks_<%=cid%>.addTask();
					task_<%=cid%>.setBasicInfo(<%=taskName%>,"<%=type%>",<%=createdBy%>,<%=owner%>,<%=starRanking%>,<%=tags%>);
					<%if(RESOLUTION_TYPE.equals(type)){%>
							taskFlag_<%=cid%> = <%=dataUtil.getValueExpression(conn.getName(),loopingColumn)%>;	
						}
					<%}%>
		
					if(<%=conn.getName() %>.<%=recordType%>){
						targetRecordExisted_<%=cid%> = true;
						<%
						if(recordColumns.size()>0){
							for(Map<String, String> recordColumn:recordColumns){
							%>
					    		recordColumn_<%=recordColumn.get("CONTENT")%>_<%=cid%> = "<%=recordColumn.get("CONTENT")%>";
					    		recordColumn_<%=recordColumn.get("CONTENT")%>_Value_<%=cid%> = <%=dataUtil.getValueExpression(conn.getName(),recordColumn.get("CONTENT"))%>;
					    		recordColumn_<%=recordColumn.get("CONTENT")%>_Type_<%=cid%> = "<%=dataUtil.getColType(recordColumn.get("CONTENT"))%>";
					    		recordColumn_<%=recordColumn.get("CONTENT")%>_Key_<%=cid%> = "<%=dataUtil.isKey(recordColumn.get("CONTENT"))%>";
							<%
							}
						}
						%>
					}else{
						record_<%=cid%> = task_<%=cid%>.addSourceRecord();
						<%if(RESOLUTION_TYPE.equals(type)){%>	
							record_<%=cid%>.setBasicInfo(<%=dataUtil.getValueExpression(conn.getName(),source)%>,<%=dataUtil.getValueExpression(conn.getName(),score)%>,<%=dataUtil.getValueExpression(conn.getName(),weights)%>);
						<%}else{%>
							record_<%=cid%>.setBasicInfo(<%=dataUtil.getValueExpression(conn.getName(),source)%>);
						<%}%>	
						<%
						if(extraInfos.size()>0){
							for(Map<String, String> extraInfo:extraInfos){
							%>
							    if(<%=extraInfo.get("TITLE")%>!=null && !"".equals(<%=extraInfo.get("TITLE")%>)){
							    	record_<%=cid%>.addExtraInfo(<%=extraInfo.get("TITLE")%>,<%=extraInfo.get("INFO")%>,"<%=extraInfo.get("SCOPE")%>");
							    }
							<%
							}
						}
						if(recordColumns.size()>0){
							for(Map<String, String> recordColumn:recordColumns){
							%>
					    		record_<%=cid%>.addSrcColumn("<%=recordColumn.get("CONTENT")%>",<%=dataUtil.getValueExpression(conn.getName(),recordColumn.get("CONTENT"))%>,"<%=dataUtil.getColType(recordColumn.get("CONTENT"))%>","<%=dataUtil.isKey(recordColumn.get("CONTENT"))%>");
							<%
							}
						}
						%>
					}
				<%
				}//4
			}//3
		}//2
	}//1
	%>


