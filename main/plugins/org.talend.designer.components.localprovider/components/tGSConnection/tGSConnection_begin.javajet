<%@ jet 
	imports="
	    org.talend.core.model.process.INode 
	    org.talend.core.model.process.ElementParameterParser 
	    org.talend.designer.codegen.config.CodeGeneratorArgument
	" 
%>
<%
CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
INode node = (INode)codeGenArgument.getArgument();
String cid = node.getUniqueName();
boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
String authType = ElementParameterParser.getValue(node, "__AUTH_TYPE__");
if (authType.equals("USER_ACCOUNT_HMAC")){
	String accessKey = ElementParameterParser.getValue(node, "__ACCESS_KEY__");
	String passwordFieldName = "__SECRET_KEY__";
	final String AWSTracker = org.talend.core.utils.TrackerUtil.getAWSTracker();
	final String GoogleTracker = org.talend.core.utils.TrackerUtil.getGoogleTracker();
%>

	<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
		
	org.jets3t.service.Jets3tProperties jets3tProperties = org.jets3t.service.Jets3tProperties.getInstance(org.jets3t.service.Constants.JETS3T_PROPERTIES_FILENAME);
	jets3tProperties.setProperty("httpclient.useragent", "<%=AWSTracker%>");
	org.jets3t.service.security.GSCredentials credentials_<%=cid%> = new org.jets3t.service.security.GSCredentials(<%=accessKey%>,decryptedPassword_<%=cid%>);
	org.jets3t.service.impl.rest.httpclient.GoogleStorageService service_<%=cid%> = new org.jets3t.service.impl.rest.httpclient.GoogleStorageService(credentials_<%=cid%>," <%=GoogleTracker%>", null, jets3tProperties);
	service_<%=cid%>.getAccountOwner();
	globalMap.put("service_" + "<%=cid%>",service_<%=cid%>);


<%
} else if (authType.equals("SERVICE_ACCOUNT")){
	String pathToServerAccoutKeyFile = ElementParameterParser.getValue(node, "__SERVICE_ACCOUNT_KEY__");
%>
	com.google.auth.Credentials credential_<%=cid%> = null;
	try {
		credential_<%=cid%> = com.google.auth.oauth2.GoogleCredentials
				.fromStream(new java.io.FileInputStream(<%=pathToServerAccoutKeyFile%>));
	} catch (IOException e_<%=cid%>) {
			<%
			if(isLog4jEnabled){
			%>
				log.error("<%=cid%> - Exception in component <%=cid%>.", e_<%=cid%>);
			<%
			}
			%>
	}

	com.google.cloud.storage.StorageOptions.Builder builder_<%=cid%> = com.google.cloud.storage.StorageOptions.newBuilder();
	com.google.cloud.storage.Storage storage_<%=cid%> = builder_<%=cid%>.setCredentials(credential_<%=cid%>).build().getService();
	globalMap.put("service_" + "<%=cid%>",storage_<%=cid%>);
<%
}
%>
	