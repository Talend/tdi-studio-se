<%@ jet 
imports="
    	org.talend.core.model.process.INode 
    	org.talend.core.model.process.ElementParameterParser
    	org.talend.designer.codegen.config.CodeGeneratorArgument
    	org.talend.core.model.process.IProcess
		"
%>
	<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%>
	<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();    	
	
	IProcess process = node.getProcess();
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(process, "__LOG4J_ACTIVATE__"));
	
	String endpoint = ElementParameterParser.getValue(node, "__ENDPOINT__");

	String username = ElementParameterParser.getValue(node, "__USER__");

	String action = ElementParameterParser.getValue(node, "__ACTION__");
	String commitLevel = ElementParameterParser.getValue(node, "__COMMIT_LEVEL__");
	boolean extendedInsert = ("true").equals(ElementParameterParser.getValue(node, "__EXTENDINSERT__"));
	String logFile = ElementParameterParser.getValue(node, "__LOGFILENAME__").trim();
	boolean ceaseForError = ("true").equals(ElementParameterParser.getValue(node, "__CEASE_FOR_ERROR__"));
	boolean needCompression = ("true").equals(ElementParameterParser.getValue(node,"__NEED_COMPRESSION__"));
	boolean useExistingConn = ("true").equals(ElementParameterParser.getValue(node,"__USE_EXISTING_CONNECTION__"));
	String connection = ElementParameterParser.getValue(node,"__CONNECTION__");
	String timeout = ElementParameterParser.getValue(node,"__TIMEOUT__");
	String clientID = ElementParameterParser.getValue(node,"__CLIENT_ID__");
	// if the extended insert is disabled set the commit level to 1
	if (!extendedInsert) commitLevel = "1";
	
   	log4jFileUtil.componentStartInfo(node);
	log4jFileUtil.logParameters(node);
	
	String passwordFieldName = "";
	
	boolean bulkConnection = false; //for tSalesforceOAuth.javajet
	
	String apiVersion = ElementParameterParser.getValue(node,"__API_VERSION__");
	String loginType = ElementParameterParser.getValue(node,"__LOGIN_TYPE__");
	boolean useOAuth = "OAUTH".equals(loginType);
	%>       
    int nb_line_<%=cid %> = 0;
    int nb_success_<%=cid%> = 0;
    int nb_reject_<%=cid%> = 0;
	System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
	org.talend.salesforce.SforceConnection sforceConn_<%=cid%> = null;
    <%
    if(useExistingConn){
    %>
        if(globalMap.get("conn_<%=connection%>") == null){
			throw new RuntimeException("Get null connection from <%=connection%>");
		}
		<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - use exsit connection : <%=connection%>");
		<%}%>
		sforceConn_<%=cid%> = (org.talend.salesforce.SforceConnection)globalMap.get("conn_<%=connection%>"); 	
	<%
	}else{
		if(useOAuth){
			String oauthKey = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_ID__");
    		String oauthSecret = ElementParameterParser.getValue(node,"__OAUTH_CLIENT_SECRET__");
    		%>
    		<%
        	passwordFieldName = "__OAUTH_CLIENT_SECRET__";
        	if (ElementParameterParser.canEncrypt(node, passwordFieldName)) {
        	%>
        		String decryptedQauthClientPwd_<%=cid%> = routines.system.PasswordEncryptUtil.decryptPassword(<%=ElementParameterParser.getEncryptedValue(node, passwordFieldName)%>);
        	<%
        	} else {
        	%>
        		String decryptedQauthClientPwd_<%=cid%> = <%= ElementParameterParser.getValue(node, passwordFieldName)%>;
        	<%
        	}
        	String tokenFile = ElementParameterParser.getValue(node,"__OAUTH_TOKEN_FILE__");
    		
    		String callbackHost = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_HOST__");
    		String callbackPort = ElementParameterParser.getValue(node,"__OAUTH_CALLBACK_PORT__");
			%>
			try{
				sforceConn_<%=cid%> = 
        			new org.talend.salesforce.SforceOAuthConnection.Builder(<%=endpoint%>, <%=oauthKey%>, decryptedQauthClientPwd_<%=cid%>, <%=apiVersion%>, <%=callbackHost%>, <%=callbackPort%>)
        				<%
        				if(!"".equals(tokenFile) && !"\"\"".equals(tokenFile)){
        				%>
            				.setTokenFilePath(<%=tokenFile%>)
        				<%
        				}
        				%>
        				.setTimeout(<%=timeout%>).needCompression(<%=needCompression%>)
                    	<%
                    	if(clientID != null && !"".equals(clientID) && !"\"\"".equals(clientID)){
                    	%>
                    		.setClientID(<%=clientID%>);
                    	<%
                    	}
                    	%>
                    	.build();
    		}catch(Exception e){
    			<%if(isLog4jEnabled){%>
    				log.warn("<%=cid%> - Login failed, error message: " + e.getMessage());
    			<%}%>	
    			throw e;
    		}
		<%
		}else{
		%>
		
			<%
			passwordFieldName = "__PASS__";
			%>

			<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
		
	        try{
				sforceConn_<%=cid%> = 
        			new org.talend.salesforce.SforceBasicConnection.Builder(<%=endpoint%>, <%=username%>, decryptedPassword_<%=cid%>)
        				.setTimeout(<%=timeout%>).needCompression(<%=needCompression%>)
                    	<%
                    	if(clientID!=null && !"".equals(clientID) && !"\"\"".equals(clientID)){
                    	%>
                    		.setClientID(<%=clientID%>);
                    	<%
                    	}
                    	%>
                    	.build();
			}catch(Exception e){
				<%if(isLog4jEnabled){%>
					log.warn("<%=cid%> - Login failed, error message: " + e.getMessage());
				<%}%>	
				throw e;
			}
    	<%
    	}
    	%>
    	<%if(isLog4jEnabled){%>
			log.info("<%=cid%> - Login successful");
		<%}%>	
    <%
    }
    %>
    org.talend.salesforce.SforceManagement sforceManagement_<%=cid%> = new org.talend.salesforce.SforceManagementImpl(sforceConn_<%=cid%>);
    <%if("upsert".equals(action)){%>
		org.apache.axiom.om.OMFactory fac_<%=cid%> = org.apache.axiom.om.OMAbstractFactory.getOMFactory();       
    <%}%>
