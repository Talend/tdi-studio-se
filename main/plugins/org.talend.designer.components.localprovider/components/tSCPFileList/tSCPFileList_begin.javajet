<%@ jet 
imports="
    org.talend.core.model.process.INode 
    org.talend.core.model.process.ElementParameterParser
    org.talend.designer.codegen.config.CodeGeneratorArgument
    java.util.List
    java.util.Map
    org.talend.core.model.process.IElementParameter
    org.talend.core.model.utils.NodeUtil 
  " 
%>
<%@ include file="../templates/Log4j/Log4jFileUtil.javajet"%> 
<%
    CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
    INode node = (INode)codeGenArgument.getArgument();
    boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
    String cid = node.getUniqueName();
    String host = ElementParameterParser.getValue(node,"__HOST__");
    String port = ElementParameterParser.getValue(node,"__PORT__");
    String user = ElementParameterParser.getValue(node,"__USERNAME__");
    String authMethod = ElementParameterParser.getValue(node,"__AUTH_METHOD__");
    String privatekey = ElementParameterParser.getValue(node,"__PRIVATEKEY__");
    String password = ElementParameterParser.getValue(node,"__PASSWORD__");
    String passphrase = ElementParameterParser.getValue(node,"__PASSPHRASE__");
   	String commandSeparator = ElementParameterParser.getValue(node, "__COMMANDSEPARATOR__");        
    List<Map<String, String>> filelist = (List<Map<String,String>>)ElementParameterParser.getObjectValue(node, "__FILELIST__");       
 %>
    /* Create a connection instance */
	<%
	String useExistingConn = ElementParameterParser.getValue(node, "__USE_EXISTING_CONNECTION__");
	if(("true").equals(useExistingConn)){
		String connection = ElementParameterParser.getValue(node, "__CONNECTION__");
		String conn= "conn_" + connection;
		INode connectionNode = NodeUtil.getNodeByUniqueName(node.getProcess(), connection);
		    host = ElementParameterParser.getValue(connectionNode, "__HOST__");
            port = ElementParameterParser.getValue(connectionNode, "__PORT__");
            user = ElementParameterParser.getValue(connectionNode,"__USERNAME__");
	%>
		org.apache.sshd.client.SshClient client_<%=cid%> = (org.apache.sshd.client.SshClient)globalMap.get("<%=conn %>");
		<%if(isLog4jEnabled){%>
			if(client_<%=cid %>!=null) {
				log.info("<%=cid%> - Uses an existing connection. Connection hostname: "+ <%=host %> + ". Connection port: <%=port %>.");
			}
		<%}%>
	<%}else{%>
	    	String hostname_<%=cid%> = <%=host%>;
            String username_<%=cid%> = <%=user%>;
           /* Create a connection instance */
        		<%if(isLog4jEnabled){%>
        			log.info("<%=cid%> - Connection attempt to '" +hostname_<%=cid%> + "' on the port '"+<%=port%>+"' as '" + username_<%=cid%> + "'.");
        		<%}%>
        		org.apache.sshd.client.SshClient client_<%=cid%> = org.apache.sshd.client.SshClient.setUpDefaultClient();
        			client_<%=cid%>.getProperties().putIfAbsent(org.apache.sshd.common.FactoryManager.IDLE_TIMEOUT, 0L);
        			client_<%=cid%>.getProperties().putIfAbsent(org.apache.sshd.common.FactoryManager.NIO2_READ_TIMEOUT, 0L);
        		<%
                if (("PUBLICKEY").equals(authMethod)) {
                %>
        		<%if(isLog4jEnabled){%>
        			log.info("<%=cid%> - Authentication using a public key.");
        		<%}%>
        		client_<%=cid%>.setUserAuthFactories(java.util.Collections.singletonList(org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory.INSTANCE));
        		java.nio.file.Path privateKey_<%=cid%> = java.nio.file.Paths.get(<%=privatekey%>);
        		java.util.List<String> lines_<%=cid%> = java.nio.file.Files.readAllLines(privateKey_<%=cid%>);

        		 org.apache.sshd.common.util.security.bouncycastle.BouncyCastleGeneratorHostKeyProvider keyProvider_<%=cid%> =
                        new org.apache.sshd.common.util.security.bouncycastle.BouncyCastleGeneratorHostKeyProvider(privateKey_<%=cid%>)

        				{

                            @Override
                            protected Iterable<java.security.KeyPair> doReadKeyPairs(org.apache.sshd.common.session.SessionContext session,
                                    org.apache.sshd.common.NamedResource resourceKey, java.io.InputStream inputStream)
                                    throws java.io.IOException, java.security.GeneralSecurityException {
                            <%String passwordFieldName = "__PASSPHRASE__";%>
                            <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
                                Iterable<java.security.KeyPair> keyPairs =
                                        org.apache.sshd.common.util.security.SecurityUtils.loadKeyPairIdentities(session, resourceKey, inputStream,
                                                (sessionContext, namedResource, i) -> decryptedPassword_<%=cid%>);
                                return keyPairs;
                            }
                        };
        		if (lines_<%=cid%>.size()>0) {
                    String[] line_<%=cid%> = lines_<%=cid%>.get(0).split(" ");
                    if ("-----BEGIN".equals(line_<%=cid%>[0])) {
                        keyProvider_<%=cid%>.setAlgorithm(line_<%=cid%>[1]);
                    }
                }
        				client_<%=cid%>.setKeyIdentityProvider(keyProvider_<%=cid%>);

                <%}%>
        		<%
                if (("KEYBOARDINTERACTIVE").equals(authMethod)) {
                %>

        		client_<%=cid%>.setUserAuthFactories(java.util.Collections.singletonList(org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractiveFactory.INSTANCE));

        		<%if(isLog4jEnabled){%>
        			log.info("<%=cid%> - Authentication using an interactive action.");
        		<%}%>

        		        client_<%=cid%>.setUserInteraction(new org.apache.sshd.client.auth.keyboard.UserInteraction() {

                    @Override
                    public String[] interactive(org.apache.sshd.client.session.ClientSession clientSession, String name, String instruction, String lang, String[] prompt,
                            boolean[] echo) {

        					<% String passwordFieldName = "__PASSWORD__"; %>
        					<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
        					String[] reply = new String[prompt.length];
        					for (int i = 0; i < reply.length; i++) {
                				reply[i] = decryptedPassword_<%=cid%>;
                			}
                        return reply;
                    }

                    @Override public String getUpdatedPassword(org.apache.sshd.client.session.ClientSession clientSession, String prompt, String lang) {
                        throw new IllegalStateException("getUpdatedPassword(" + clientSession + ")[" + prompt + "] unexpected call");
                    }
                });

        <%
                }
        %>

        		<%if (("PASSWORD").equals(authMethod)) {%>
        			<%if(isLog4jEnabled){%>
        			    log.info("<%=cid%> - Authentication using a password.");
        		    <%}%>
        	        <%String passwordFieldName = "__PASSWORD__";%>
        		    <%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
        		    client_<%=cid%>.addPasswordIdentity(decryptedPassword_<%=cid%>);
        		<%}%>
<%}%>

                client_<%=cid%>.start();

        		/* Create a session */

        		org.apache.sshd.client.session.ClientSession session_<%=cid%> = null;

                      /* Now connect */

                <%if(isLog4jEnabled){%>
        			log.info("<%=cid%> - Connection to '" +<%=host%> + "' has succeeded.");
        		<%}%>

        				/* open a session */

                			<%if(isLog4jEnabled){%>
                			    log.info("<%=cid%> - Authentication using a password.");
                		    <%}%>

                			session_<%=cid%> = client_<%=cid%>.connect(<%=user%>, <%=host%>, Integer.parseInt(<%=port %>+"")).verify().getClientSession();
                	    try {
                            session_<%=cid%>.auth().verify();
                        }catch (org.apache.sshd.common.SshException se_<%=cid%>){
                		    globalMap.put("<%=cid %>_EXIT_CODE",se_<%=cid%>.getDisconnectCode());
                		<%
                        if (("PUBLICKEY").equals(authMethod)) {
                        %>
                			java.nio.file.Files.write(privateKey_<%=cid%>,lines_<%=cid%>);
                		<%}%>
                            if(14 == se_<%=cid%>.getDisconnectCode()){
                                throw new IllegalArgumentException("Authentication failed.");
                            }else{
                                throw se_<%=cid%>;
                            }
                        }
		//execute the command

//initial the command
		StringBuilder command_<%=cid %> = new StringBuilder();
         <%
        	for (Map<String, String> file : filelist) {
         %>
         		if(command_<%=cid %>.length() > 0){
					command_<%=cid %>.append(<%=commandSeparator %>);
				}
            	command_<%=cid %>.append(<%=file.get("SOURCE")%>);
         <%
            }
         %>
		/* Create a session */
		org.apache.sshd.client.channel.ClientChannel channel_<%=cid %> = session_<%=cid %>.createExecChannel((command_<%=cid %>).toString());

				StringBuilder stringStdout_<%=cid%> =new StringBuilder();
        		StringBuilder stringStderr_<%=cid%> =new StringBuilder();
        		Integer exit_code_<%=cid%> = null;

		        java.io.ByteArrayOutputStream stdout_<%=cid %> = new java.io.ByteArrayOutputStream();
        		java.io.ByteArrayOutputStream stderr_<%=cid %> = new java.io.ByteArrayOutputStream();
                channel_<%=cid%>.setOut(stdout_<%=cid %>);
                channel_<%=cid%>.setErr(stderr_<%=cid %>);
        		channel_<%=cid%>.open();
        		java.util.Set<org.apache.sshd.client.channel.ClientChannelEvent> clientChannelEvents_<%=cid %> =
        		channel_<%=cid%>.waitFor(java.util.EnumSet.of(
        		org.apache.sshd.client.channel.ClientChannelEvent.CLOSED,org.apache.sshd.client.channel.ClientChannelEvent.EXIT_STATUS), 0L);
        		exit_code_<%=cid%> = channel_<%=cid%>.getExitStatus();
        		channel_<%=cid%>.close();
        		session_<%=cid%>.close();
        		<%if(isLog4jEnabled){%>
        			log.debug("Channel Events: "+ java.util.Arrays.toString(clientChannelEvents_<%=cid %>.toArray()));
        		<%}%>
        		stringStdout_<%=cid%>.append(stdout_<%=cid%>.toString());
        		stringStderr_<%=cid%>.append(stderr_<%=cid%>.toString());

        		if(stringStdout_<%=cid%>.length() >0 && stringStdout_<%=cid%>.charAt(stringStdout_<%=cid%>.length()-1) == '\n'){
        		    stringStdout_<%=cid%>.deleteCharAt(stringStdout_<%=cid%>.length()-1);
        		}

        		<%if(isLog4jEnabled){%>
        			log.debug("<%=cid%> - Command line standard result: " + stringStdout_<%=cid%>.toString());
        			log.debug("<%=cid%> - Command line error result: " + stringStderr_<%=cid%>.toString());
        		<%}%>


		//execute the command
		int nb_line_<%=cid %> = 0;
		//get the return info
		String[] split_<%=cid %> = stringStdout_<%=cid%>.toString().split("\n");
		String line_out_<%=cid%> = "";
		for (int i_<%=cid %> = 0; i_<%=cid %> < split_<%=cid %>.length; i_<%=cid %>++) {
		line_out_<%=cid%> = split_<%=cid %>[i_<%=cid %>];
