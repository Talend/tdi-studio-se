<%@ jet
imports="
		org.talend.designer.codegen.config.CodeGeneratorArgument
		org.talend.core.model.process.INode
		org.talend.core.model.process.ElementParameterParser  
		org.talend.core.model.metadata.IMetadataTable 
		org.talend.core.model.metadata.IMetadataColumn
		java.util.List
		java.util.ArrayList
		java.util.LinkedList
" 
%>
<%@ include file="../templates/Log4j/Log4jDBConnUtil.javajet"%>
<%
	CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
	INode node = (INode)codeGenArgument.getArgument();
	String cid = node.getUniqueName();
    String dbServer = ElementParameterParser.getValue(node, "__SERVER__");
    String dbname= ElementParameterParser.getValue(node, "__DBNAME__");
    String dbhost = ElementParameterParser.getValue(node, "__HOST__");
	String dbuser= ElementParameterParser.getValue(node, "__USER__");
	String tableName = ElementParameterParser.getValue(node,"__TABLE__");
	String commitEvery = ElementParameterParser.getValue(node, "__COMMIT_EVERY__");
	String dbproperties = ElementParameterParser.getValue(node, "__PROPERTIES__");
	boolean isLog4jEnabled = ("true").equals(ElementParameterParser.getValue(node.getProcess(), "__LOG4J_ACTIVATE__"));
%>
int nb_line_<%=cid%> = 0;
int nb_line_inserted_<%=cid%> = 0;
int insertedCount_<%=cid%>=0;

String driverClass_<%=cid%> = "com.teradata.jdbc.TeraDriver";
java.lang.Class.forName(driverClass_<%=cid%>);
String url_<%=cid %> = "jdbc:teradata://" + <%=dbhost%>+"/TYPE=FASTLOAD";

String dbProperties_<%=cid%> = <%=dbproperties%>;
if(dbProperties_<%=cid%> != null && dbProperties_<%=cid%>.trim().length() > 0) {
	url_<%=cid %> +=","+dbProperties_<%=cid%>;
}

<%
boolean isDynamic = false;
List<IMetadataColumn> columnList = null;
List<IMetadataTable> metadatas = node.getMetadataList();
if(metadatas !=null && metadatas.size()>0){
	IMetadataTable metadata = metadatas.get(0);
	if(metadata != null){
		columnList = metadata.getListColumns();
		isDynamic = metadata.isDynamicSchema();
	}
}
%>

String dbUser_<%=cid %> = <%=dbuser%>;
<% String passwordFieldName = "__PASS__"; %>
<%@ include file="@{org.talend.designer.components.localprovider}/components/templates/password.javajet"%>
String dbPwd_<%=cid %> = decryptedPassword_<%=cid%>;

java.sql.Connection conn_<%=cid%> = null;
<%
  	log4jCodeGenerateUtil.debugConnectionParams(node);
	log4jCodeGenerateUtil.connect(node);
%>

java.sql.PreparedStatement pstmt_<%=cid %> =null;
int commitCounter_<%=cid%> = 0;
<%
if(columnList != null && columnList.size()>0){
class Column{
	IMetadataColumn column;
	String name;
	String sqlStmt;
	String value;
	boolean addCol;
	List<Column> replacement = new ArrayList<Column>();
	
	public Column(String colName,String sqlStmt,boolean addCol){
		this.column = null;
		this.name = colName;
		this.sqlStmt = sqlStmt;
		this.value = "?";
		this.addCol =addCol;
	}
	
	public Column(IMetadataColumn column){
		this.column = column;
		this.name = column.getLabel();
		this.sqlStmt = "=?";
		this.value = "?";
		this.addCol =false;
	}
	
	public boolean isReplaced(){
		return replacement.size()>0;
	}
	
	public void replace(Column column){
		this.replacement.add(column);
	}
	
	public List<Column> getReplacement(){
		return this.replacement;
	}
	
	public void setColumn(IMetadataColumn column){
		this.column = column;
	}
	
	public IMetadataColumn getColumn(){
		return this.column;
	}
	
	public void setName(String name){
		this.name = name;
	}

	public String getName(){
		return this.name;
	}
	
	public void setIsAddCol(boolean isadd){
		this.addCol = isadd;
	}
	
	public boolean isAddCol(){
		return this.addCol;
	}
	
	public void setSqlStmt(String sql){
		this.sqlStmt = sql;
	}
	
	public String getSqlStmt(){
		return this.sqlStmt;
	}
	
	public void setValue(String value){
		this.value = value;
	}
	
	public String getValue(){
		return this.value;
	}
}

StringBuilder insertColName = new StringBuilder();
StringBuilder insertValueStmt = new StringBuilder();
List<Column> stmtStructure =  new LinkedList<Column>();

for(IMetadataColumn column:columnList) {
	stmtStructure.add(new Column(column));
}

int counterOuter =0;
boolean firstKey = true;
boolean firstNoneKey = true;

for(Column colStmt:stmtStructure){
	String suffix = ",";
		if(counterOuter==(stmtStructure.size()-1)) {
			suffix = "";
		}
		insertColName.append(colStmt.getName()+suffix);
		insertValueStmt.append(colStmt.getValue()+suffix);
	counterOuter ++;
}
%>

	 String tableName_<%=cid%> = <%=tableName%>;
	 String dbname_<%=cid%> = <%=dbname%>;
	if(dbname_<%=cid%> == null || dbname_<%=cid%>.trim().length() == 0) {
    	tableName_<%=cid%> = <%=tableName%>;
	} else {
    	tableName_<%=cid%> = dbname_<%=cid%> + "." + <%=tableName%>;
	}
<%
if (!isDynamic) {
%>
		pstmt_<%=cid %> = conn_<%=cid%>.prepareStatement("INSERT INTO "+tableName_<%=cid%>+" (<%=insertColName.toString()%>) VALUES (<%=insertValueStmt.toString()%>)");
<%
}
	if(!"".equals(commitEvery) && !"0".equals(commitEvery)){
%>
	int commitEvery_<%=cid%> = <%=commitEvery%>;
	conn_<%=cid%>.setAutoCommit(false);
<%
	}
} /* if columnList end */
%>