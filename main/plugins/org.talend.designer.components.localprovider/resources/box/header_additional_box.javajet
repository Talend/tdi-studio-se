<%@ jet 
	package="org.talend.designer.codegen.translators.common"
	imports="
		java.util.List
		java.util.Vector
		
		org.talend.core.model.process.INode
		org.talend.core.model.process.IProcess
		org.talend.designer.codegen.config.CodeGeneratorArgument
	"	
	class="Header_additional" 
%>
	
<%
boolean hasBox = false;

CodeGeneratorArgument codeGenArgument = (CodeGeneratorArgument) argument;
Vector v = (Vector) codeGenArgument.getArgument();
IProcess process = (IProcess)v.get(0);

List<? extends INode> tBoxCreateList = process.getNodesOfType("tBoxCreate");
List<? extends INode> tBoxGetList = process.getNodesOfType("tBoxGet");
List<? extends INode> tBoxListList = process.getNodesOfType("tBoxList");
List<? extends INode> tBoxCopyList = process.getNodesOfType("tBoxCopy");
List<? extends INode> tBoxUploadList = process.getNodesOfType("tBoxUpload");
List<? extends INode> tBoxDeleteList = process.getNodesOfType("tBoxDelete");

if((tBoxCreateList != null && tBoxCreateList.size() > 0) || (tBoxGetList != null && tBoxGetList.size() > 0)
	|| (tBoxListList != null && tBoxListList.size() > 0) || (tBoxCopyList != null && tBoxCopyList.size() > 0)
	|| (tBoxUploadList != null && tBoxUploadList.size() > 0) || (tBoxDeleteList != null && tBoxDeleteList.size() > 0)){
	hasBox = true;
}

if(hasBox){
%>	
	
	public com.box.boxjavalibv2.dao.BoxFolder searchFolder(com.box.boxjavalibv2.BoxClient client, String path, String name) throws Exception
	{
		com.box.boxjavalibv2.dao.BoxFolder boxFolder = null;
		if (name.equals("All Files") || path.equals("All Files"))
		{
			return client.getFoldersManager().getFolder("0", null);
		}
		com.box.boxjavalibv2.dao.BoxCollection searchResults = client.getSearchManager().search(name, null);
		for (com.box.boxjavalibv2.dao.BoxTypedObject entry : searchResults.getEntries())
		{
			if (entry instanceof com.box.boxjavalibv2.dao.BoxFolder && ((com.box.boxjavalibv2.dao.BoxFolder) entry).getName().equals(name))
			{
				if (path == null || path.isEmpty())
				{
					return ((com.box.boxjavalibv2.dao.BoxFolder) entry);
				}
				java.lang.StringBuilder sBuilder = new java.lang.StringBuilder();
				for (com.box.boxjavalibv2.dao.BoxTypedObject obj : ((com.box.boxjavalibv2.dao.BoxFolder) entry).getPathCollection().getEntries())
				{
					sBuilder.append(obj.getValue("name") + "/");
				}
				sBuilder.append(((com.box.boxjavalibv2.dao.BoxFolder) entry).getName());
				if (sBuilder.toString().equals(path))
				{
					boxFolder = (com.box.boxjavalibv2.dao.BoxFolder) entry;
					return boxFolder;
				}
			}
		}
		return null;
	}
	
	public com.box.boxjavalibv2.dao.BoxFile searchFile(com.box.boxjavalibv2.BoxClient client, String path, String name) throws Exception
	{
		com.box.boxjavalibv2.dao.BoxFile boxFile = null;
		com.box.boxjavalibv2.dao.BoxCollection searchResults = client.getSearchManager().search(name, null);
		for (com.box.boxjavalibv2.dao.BoxTypedObject entry : searchResults.getEntries())
		{
			if (entry instanceof com.box.boxjavalibv2.dao.BoxFile && ((com.box.boxjavalibv2.dao.BoxFile) entry).getName().equals(name))
			{
				if (path == null || path.isEmpty())
				{
					return ((com.box.boxjavalibv2.dao.BoxFile) entry);
				}
				java.lang.StringBuilder sBuilder = new java.lang.StringBuilder();
				for (com.box.boxjavalibv2.dao.BoxTypedObject obj : ((com.box.boxjavalibv2.dao.BoxFile) entry).getPathCollection().getEntries())
				{
					sBuilder.append(obj.getValue("name") + "/");
				}
				sBuilder.append(((com.box.boxjavalibv2.dao.BoxFile) entry).getName());
				if (sBuilder.toString().equals(path))
				{
					boxFile = (com.box.boxjavalibv2.dao.BoxFile) entry;
					return boxFile;
				}
			}
		}
		return null;
	}
	
	private String getBoxItemPath(com.box.boxjavalibv2.dao.BoxItem item)
    {
    	if (item == null)
    		return "";
    	java.lang.StringBuilder itemPath = new java.lang.StringBuilder();
    	for (com.box.boxjavalibv2.dao.BoxTypedObject obj : item.getPathCollection().getEntries())
    		itemPath.append(obj.getValue("name") + "/");
    	return itemPath.toString();
    }
	
	private static String normalizePath(String path)
	{
		if (path == null)
		{
			return null;
		}
		path = path.replace('\\', '/');
		if (path.startsWith("/"))
		{
			path = path.substring(1);
		}
		if (path.endsWith("/"))
			path = path.substring(0, path.length() - 1);
		return path;
	}
	
	private static String getFolderFromPath(String path)
	{
		if (path != null && !path.isEmpty())
		{
			String[] parts = path.split("/");
			String folder = null;
			if (parts.length > 1)
				folder = parts[parts.length - 1];
			else
				folder = parts[0];
			return folder;
		}
		return null;
	}

<%
}
%>